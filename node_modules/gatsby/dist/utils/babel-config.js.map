{"version":3,"sources":["../../src/utils/babel-config.js"],"names":["apiRunnerNode","require","store","buildConfig","abstractConfig","stage","resolve","babelrc","options","presets","plugins","forEach","p","push","name","hasOwnProperty","cacheDirectory","unshift","exports","createBabelConfig","program","babelrcState","getState","stages","babelConfig"],"mappings":";;;;;;AAEA,MAAMA,gBAAgBC,QAAS,mBAAT,CAAtB;;iBACkBA,QAAS,UAAT,C;MAAVC,K,YAAAA,K;;AAER,MAAMC,cAAc,CAACC,cAAD,EAAiBC,KAAjB,EAAwBC,UAAUL,QAAQK,OAA1C,KAAsD;AACxE,MAAIC,4BACCH,eAAeI,OADhB;AAEFC,aAAS,EAFP;AAGFC,aAAS;AAHP,IAAJ;AAMAN,iBAAeK,OAAf,CAAuBE,OAAvB,CAA+BC,KAC7BL,QAAQE,OAAR,CAAgBI,IAAhB,CAAqB,CAACP,QAAQM,EAAEE,IAAV,CAAD,EAAkBF,EAAEJ,OAApB,CAArB,CADF;AAGAJ,iBAAeM,OAAf,CAAuBC,OAAvB,CAA+BC,KAC7BL,QAAQG,OAAR,CAAgBG,IAAhB,CAAqB,CAACP,QAAQM,EAAEE,IAAV,CAAD,EAAkBF,EAAEJ,OAApB,CAArB,CADF;;AAIA,MAAI,CAACD,QAAQQ,cAAR,CAAwB,gBAAxB,CAAL,EAA+C;AAC7CR,YAAQS,cAAR,GAAyB,IAAzB;AACD;;AAED,MAAIX,UAAW,SAAf,EAAyB;AACvB;AACAE,YAAQG,OAAR,CAAgBO,OAAhB,CAAwBX,QAAS,wBAAT,CAAxB;AACD,GArBuE,CAuBxE;;;AACA,MAAID,UAAW,YAAX,IAA0BA,UAAW,cAAzC,EAAwD;AACtDE,YAAQG,OAAR,CAAgBO,OAAhB,CAAwBX,QAAS,kCAAT,CAAxB;AACD;;AAEDC,UAAQG,OAAR,CAAgBO,OAAhB,CAAwBX,QAAS,qCAAT,CAAxB;AAEA,SAAOC,OAAP;AACD,CA/BD;;AAiCAW,QAAQf,WAAR,GAAsBA,WAAtB;AAEA;;;;;AAIAe,QAAQC,iBAAR;AAAA;AAAA;AAAA,qDAA4B,WAA2BC,OAA3B,EAAoCf,KAApC,EAA2C;AACrE,UAAML,cAAe,qBAAf,EAAqC;AAAEK;AAAF,KAArC,CAAN;AACA,UAAMgB,eAAenB,MAAMoB,QAAN,GAAiBf,OAAtC;AACA,QAAIA,UAAUJ,YAAYkB,aAAaE,MAAb,CAAoBlB,KAApB,CAAZ,EAAwCA,KAAxC,CAAd;AAEA,WAAOE,OAAP;AACD,GAND;;AAAA,kBAA2CiB,WAA3C;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\n\nconst apiRunnerNode = require(`./api-runner-node`)\nconst { store } = require(`../redux`)\n\nconst buildConfig = (abstractConfig, stage, resolve = require.resolve) => {\n  let babelrc = {\n    ...abstractConfig.options,\n    presets: [],\n    plugins: [],\n  }\n\n  abstractConfig.presets.forEach(p =>\n    babelrc.presets.push([resolve(p.name), p.options])\n  )\n  abstractConfig.plugins.forEach(p =>\n    babelrc.plugins.push([resolve(p.name), p.options])\n  )\n\n  if (!babelrc.hasOwnProperty(`cacheDirectory`)) {\n    babelrc.cacheDirectory = true\n  }\n\n  if (stage === `develop`) {\n    // TODO: maybe this should be left to the user?\n    babelrc.plugins.unshift(resolve(`react-hot-loader/babel`))\n  }\n\n  // Make dynamic imports work during SSR.\n  if (stage === `build-html` || stage === `develop-html`) {\n    babelrc.plugins.unshift(resolve(`babel-plugin-dynamic-import-node`))\n  }\n\n  babelrc.plugins.unshift(resolve(`babel-plugin-remove-graphql-queries`))\n\n  return babelrc\n}\n\nexports.buildConfig = buildConfig\n\n/**\n * Returns a normalized Babel config to use with babel-loader. All of\n * the paths will be absolute so that Babel behaves as expected.\n */\nexports.createBabelConfig = async function babelConfig(program, stage) {\n  await apiRunnerNode(`onCreateBabelConfig`, { stage })\n  const babelrcState = store.getState().babelrc\n  let babelrc = buildConfig(babelrcState.stages[stage], stage)\n\n  return babelrc\n}\n"],"file":"babel-config.js"}