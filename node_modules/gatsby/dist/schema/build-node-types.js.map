{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","tracer","globalTracer","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromFields","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","getNodeAndSavePathDependency","createPageDependency","setFileNodeRootType","clearTypeExampleValues","nodesCache","Map","module","exports","parentSpan","spanArgs","childOf","span","startSpan","types","groupBy","node","internal","type","processedTypes","createNodeFields","defaultNodeFields","id","description","parent","resolve","a","context","path","children","map","childNodesByType","nodes","flatMap","camelCase","undefined","value","Object","keys","forEach","childNodeType","maxChildCount","maxBy","values","c","g","length","nodeObjectType","filteredNodes","filter","n","nodeId","childNode","find","inferredFields","ignoreFields","fieldsFromPlugins","createType","typeName","intermediateType","name","traceId","mergedFieldsFromPlugins","merge","inferredInputFieldsFromPlugins","fields","gqlType","interfaces","proccesedType","isTypeOf","inferedInputFields","filterFields","args","runSift","latestNodes","process","env","NODE_ENV","has","get","set","isObject","Promise","all","finish"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n} = require(`graphql`)\nconst tracer = require(`opentracing`).globalTracer()\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode, getNodeAndSavePathDependency } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst { setFileNodeRootType } = require(`./types/type-file`)\nconst { clearTypeExampleValues } = require(`./data-tree-utils`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = {\n  [typeName: string]: ProcessedNodeType,\n}\n\nconst nodesCache = new Map()\n\nmodule.exports = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n\n  const types = _.groupBy(getNodes(), node => node.internal.type)\n  const processedTypes: TypeMap = {}\n\n  clearTypeExampleValues()\n\n  // Reset stored File type to not point to outdated type definition\n  setFileNodeRootType(null)\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve(node, a, context) {\n          return getNodeAndSavePathDependency(node.parent, context.path)\n        },\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve(node, a, { path }) {\n          return node.children.map(id => getNodeAndSavePathDependency(id, path))\n        },\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const filteredNodes = node.children\n              .map(id => getNode(id))\n              .filter(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            // Add dependencies for the path\n            filteredNodes.forEach(n =>\n              createPageDependency({\n                path,\n                nodeId: n.id,\n              })\n            )\n            return filteredNodes\n          },\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const childNode = node.children\n              .map(id => getNode(id))\n              .find(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            if (childNode) {\n              // Add dependencies for the path\n              createPageDependency({\n                path,\n                nodeId: childNode.id,\n              })\n              return childNode\n            }\n            return null\n          },\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      ignoreFields: Object.keys(type.fieldsFromPlugins),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n      parentSpan: span,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: mergedFieldsFromPlugins,\n    })\n\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferedInputFields.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: filterFields,\n        resolve(a, args, context) {\n          const runSift = require(`./run-sift`)\n          let latestNodes\n          if (\n            process.env.NODE_ENV === `production` &&\n            nodesCache.has(typeName)\n          ) {\n            latestNodes = nodesCache.get(typeName)\n          } else {\n            latestNodes = _.filter(\n              getNodes(),\n              n => n.internal.type === typeName\n            )\n            nodesCache.set(typeName, latestNodes)\n          }\n          if (!_.isObject(args)) {\n            args = {}\n          }\n          return runSift({\n            args: {\n              filter: {\n                ...args,\n              },\n            },\n            nodes: latestNodes,\n            path: context.path ? context.path : ``,\n            typeName: typeName,\n            type: gqlType,\n          })\n        },\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n\n    // Special case to construct linked file type used by type inferring\n    if (typeName === `File`) {\n      setFileNodeRootType(gqlType)\n    }\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  span.finish()\n\n  return processedTypes\n}\n"],"file":"build-node-types.js"}