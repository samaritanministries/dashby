{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","tracer","globalTracer","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromFields","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","getNodeAndSavePathDependency","createPageDependency","setFileNodeRootType","clearTypeExampleValues","nodesCache","Map","module","exports","parentSpan","spanArgs","childOf","span","startSpan","types","groupBy","filter","node","internal","ignoreType","type","processedTypes","createNodeFields","defaultNodeFields","id","description","parent","resolve","a","context","path","children","map","childNodesByType","nodes","flatMap","camelCase","undefined","value","Object","keys","forEach","childNodeType","maxChildCount","maxBy","values","c","g","length","nodeObjectType","filteredNodes","n","nodeId","childNode","find","inferredFields","ignoreFields","fieldsFromPlugins","createType","typeName","intermediateType","name","traceId","mergedFieldsFromPlugins","merge","inferredInputFieldsFromPlugins","fields","gqlType","interfaces","proccesedType","isTypeOf","inferedInputFields","filterFields","args","runSift","latestNodes","process","env","NODE_ENV","has","get","set","isObject","Promise","all","finish"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n} = require(`graphql`)\nconst tracer = require(`opentracing`).globalTracer()\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode, getNodeAndSavePathDependency } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst { setFileNodeRootType } = require(`./types/type-file`)\nconst { clearTypeExampleValues } = require(`./data-tree-utils`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = {\n  [typeName: string]: ProcessedNodeType,\n}\n\nconst nodesCache = new Map()\n\nmodule.exports = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n\n  const types = _.groupBy(\n    getNodes().filter(node => node.internal && !node.internal.ignoreType),\n    node => node.internal.type\n  )\n  const processedTypes: TypeMap = {}\n\n  clearTypeExampleValues()\n\n  // Reset stored File type to not point to outdated type definition\n  setFileNodeRootType(null)\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve(node, a, context) {\n          return getNodeAndSavePathDependency(node.parent, context.path)\n        },\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve(node, a, { path }) {\n          return node.children.map(id => getNodeAndSavePathDependency(id, path))\n        },\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const filteredNodes = node.children\n              .map(id => getNode(id))\n              .filter(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            // Add dependencies for the path\n            filteredNodes.forEach(n =>\n              createPageDependency({\n                path,\n                nodeId: n.id,\n              })\n            )\n            return filteredNodes\n          },\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const childNode = node.children\n              .map(id => getNode(id))\n              .find(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            if (childNode) {\n              // Add dependencies for the path\n              createPageDependency({\n                path,\n                nodeId: childNode.id,\n              })\n              return childNode\n            }\n            return null\n          },\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      ignoreFields: Object.keys(type.fieldsFromPlugins),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n      parentSpan: span,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: mergedFieldsFromPlugins,\n    })\n\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferedInputFields.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: filterFields,\n        resolve(a, args, context) {\n          const runSift = require(`./run-sift`)\n          let latestNodes\n          if (\n            process.env.NODE_ENV === `production` &&\n            nodesCache.has(typeName)\n          ) {\n            latestNodes = nodesCache.get(typeName)\n          } else {\n            latestNodes = _.filter(\n              getNodes(),\n              n => n.internal.type === typeName\n            )\n            nodesCache.set(typeName, latestNodes)\n          }\n          if (!_.isObject(args)) {\n            args = {}\n          }\n          return runSift({\n            args: {\n              filter: {\n                ...args,\n              },\n            },\n            nodes: latestNodes,\n            path: context.path ? context.path : ``,\n            typeName: typeName,\n            type: gqlType,\n          })\n        },\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n\n    // Special case to construct linked file type used by type inferring\n    if (typeName === `File`) {\n      setFileNodeRootType(gqlType)\n    }\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  span.finish()\n\n  return processedTypes\n}\n"],"file":"build-node-types.js"}