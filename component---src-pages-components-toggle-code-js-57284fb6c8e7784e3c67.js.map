{"version":3,"sources":["webpack:///./src/pages/components/toggle/code.js","webpack:///./src/components/subnavigation.js","webpack:///./src/components/codetoggle.js","webpack:///./node_modules/prismjs/plugins/custom-class/prism-custom-class.min.js","webpack:///./src/components/codetoggle-scss.js","webpack:///./node_modules/prismjs/components/prism-scss.min.js"],"names":["currentPageNameLower","toLowerCase","ToggleCode","render","location","this","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_4__","className","_components_subnavigation__WEBPACK_IMPORTED_MODULE_5__","pageName","_components_appcontent__WEBPACK_IMPORTED_MODULE_6__","id","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","pathname","htmlFor","name","type","_components_codetoggle__WEBPACK_IMPORTED_MODULE_7__","_components_codetoggle_scss__WEBPACK_IMPORTED_MODULE_8__","React","Component","propTypes","PropTypes","object","isRequired","SubNav","_ref","sectionName","getPageName","getSectionName","isPartiallyActive","_ref2","isPartiallyCurrent","PartialNavLink","Object","assign","getProps","children","CodeToggle","_this","_React$Component","call","state","showCode","toggleCode","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default","setState","prevState","componentDidMount","Prism","highlightAll","plugins","customClass","map","tag","react__WEBPACK_IMPORTED_MODULE_2___default","onClick","global","self","s","classMap","i","prefix","prefixString","hooks","add","classes","CodeToggleSCSS","languages","scss","extend","comment","pattern","lookbehind","atrule","inside","rule","url","selector","parent","alias","placeholder","variable","insertBefore","keyword","property","statement","boolean","null","operator","rest"],"mappings":"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","file":"component---src-pages-components-toggle-code-js-57284fb6c8e7784e3c67.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../../../components/layout'\nimport SubNav from '../../../components/subnavigation'\nimport AppContent from '../../../components/appcontent'\nimport CodeToggle from '../../../components/codetoggle'\nimport CodeToggleSCSS from '../../../components/codetoggle-scss'\n\nconst currentPageName = \"Toggle\";\nconst currentPageNameLower = currentPageName.toLowerCase();\n\nclass ToggleCode extends React.Component {\n  static propTypes = { location: PropTypes.object.isRequired }\n\n  render() {\n    const { location } = this.props;\n\n    return (\n      <Layout>\n        <header className=\"subnav\">\n          <h1>{currentPageName}</h1>\n          <SubNav pageName={currentPageNameLower}/>\n        </header>\n        <AppContent>\n          <div className=\"row\">\n            <div className=\"column column--full\">\n            <h2 className=\"example-header no-margin--top\" id=\"customToggleSwitch\">Custom Toggle Switch\n              <Link to={location.pathname + \"/#customToggleSwitch\"} className=\"button button--transparent button--copy-link\"></Link>\n            </h2>\n            <div className=\"row example-container\">\n              <fieldset className=\"column column--full\">\n                <label className=\"inline\" htmlFor=\"switch1\">Switch</label>\n                <div className=\"switch\">\n                  <input name=\"switch\" type=\"checkbox\" className=\"switch--checkbox\" id=\"switch1\" />\n                  <label className=\"switch--label\" htmlFor=\"switch1\">\n                    <span className=\"switch--inner\"></span>\n                    <span className=\"switch--handle\"></span>\n                  </label>\n                </div>\n              </fieldset>\n            </div>\n              <CodeToggle>\n{`<!-- Custom Toggle Switch -->\n<fieldset class=\"column column--full\">\n  <label class=\"inline\" for=\"switch1\">Switch</label>\n  <div class=\"switch\">\n    <input name=\"switch\" type=\"checkbox\" class=\"switch--checkbox\" id=\"switch1\" />\n    <label class=\"switch--label\" for=\"switch1\">\n      <span class=\"switch--inner\"></span>\n      <span class=\"switch--handle\"></span>\n    </label>\n  </div>\n</fieldset>`}\n              </CodeToggle>\n              <CodeToggleSCSS>\n{`//Include these variables in your theme file to change the color of your switch\n$switch--on: $blue !default; //Color of switch when on\n$switch--off: $gray-250 !default; //Color of switch when off\n}`}\n              </CodeToggleSCSS>\n\n            </div>\n          </div>\n        </AppContent>\n      </Layout>\n    )\n  }\n}\n\nexport default ToggleCode;\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst SubNav = ({ pageName, sectionName }) => {\n\n  if (sectionName == null) {\n    sectionName = \"components\"\n  }\n  //For Component Names with a space\n  if (pageName === \"css grid\") {\n    pageName = \"css-grid\"\n  } else if (pageName === \"progress stepper\") {\n    pageName = \"progress-stepper\"\n  } else if (pageName === \"radio buttons\") {\n    pageName = \"radio-buttons\"\n  }\n\n  const getPageName = pageName;\n  const getSectionName = sectionName;\n\n  const isPartiallyActive = ({ isPartiallyCurrent }) => {\n  return isPartiallyCurrent\n    ? { className: 'active' }\n    : { className: '' }\n  }\n\n  const PartialNavLink = props => (\n    <Link getProps={isPartiallyActive} {...props}>\n      {props.children}\n    </Link>\n  )\n\n  return (\n    <div className=\"subnav-links\">\n        <PartialNavLink to={ getSectionName + \"/\" + getPageName  + \"/code\"}>Code</PartialNavLink>\n        <PartialNavLink to={ getSectionName + \"/\" + getPageName  + \"/guidelines\"}>Guidelines</PartialNavLink>\n    </div>\n  );\n};\n\nexport default SubNav\n","import React from 'react'\nimport Prism from 'prismjs'\nimport 'prismjs/plugins/custom-class/prism-custom-class.min.js'\n\nclass CodeToggle extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n    this.toggleCode = this.toggleCode.bind(this);\n  }\n\n   toggleCode() {\n    this.setState(prevState => ({\n      showCode: !prevState.showCode\n    }));\n  }\n\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n\n  render() {\n    Prism.plugins.customClass.map({ tag: 'exampletag', });\n\n    return (\n      <div className={this.state.showCode ? 'group-open' : ''}>\n        <div onClick={this.toggleCode} className={this.state.showCode ? 'code-toggle is-open' : 'code-toggle'}><i className=\"icon--code\"></i></div>\n        <pre className={this.state.showCode ? 'language-html show' : 'language-html'}>\n          <code className={this.state.showCode ? 'language-html show' : 'language-html'}>{this.props.children}</code>\n        </pre>\n      </div>\n    )\n  }\n}\nexport default CodeToggle;\n","!function(){if(\"undefined\"!=typeof self&&self.Prism||\"undefined\"!=typeof global&&global.Prism){var s={classMap:{}};Prism.plugins.customClass={map:function(i){s.classMap=i},prefix:function(i){s.prefixString=i}},Prism.hooks.add(\"wrap\",function(i){(s.classMap||s.prefixString)&&(i.classes=i.classes.map(function(i){return(s.prefixString||\"\")+(s.classMap[i]||i)}))})}}();","import React from 'react'\nimport Prism from 'prismjs'\nimport 'prismjs/components/prism-scss.min.js'\n\nclass CodeToggleSCSS extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n    this.toggleCode = this.toggleCode.bind(this);\n  }\n\n   toggleCode() {\n    this.setState(prevState => ({\n      showCode: !prevState.showCode\n    }));\n  }\n\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n\n  render() {\n\n    return (\n      <pre className=\"language-scss\">\n        <code className=\"language-scss\">{this.props.children}</code>\n      </pre>\n    )\n  }\n}\nexport default CodeToggleSCSS;\n","Prism.languages.scss=Prism.languages.extend(\"css\",{comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0},atrule:{pattern:/@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,inside:{rule:/@[\\w-]+/}},url:/(?:[-a-z]+-)*url(?=\\()/i,selector:{pattern:/(?=\\S)[^@;{}()]?(?:[^@;{}()]|&|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,inside:{parent:{pattern:/&/,alias:\"important\"},placeholder:/%[-\\w]+/,variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}}}),Prism.languages.insertBefore(\"scss\",\"atrule\",{keyword:[/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,{pattern:/( +)(?:from|through)(?= )/,lookbehind:!0}]}),Prism.languages.scss.property={pattern:/(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/i,inside:{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}},Prism.languages.insertBefore(\"scss\",\"important\",{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}),Prism.languages.insertBefore(\"scss\",\"function\",{placeholder:{pattern:/%[-\\w]+/,alias:\"selector\"},statement:{pattern:/\\B!(?:default|optional)\\b/i,alias:\"keyword\"},\"boolean\":/\\b(?:true|false)\\b/,\"null\":/\\bnull\\b/,operator:{pattern:/(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,lookbehind:!0}}),Prism.languages.scss.atrule.inside.rest=Prism.languages.scss;"],"sourceRoot":""}