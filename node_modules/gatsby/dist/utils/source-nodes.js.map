{"version":3,"sources":["../../src/utils/source-nodes.js"],"names":["_","require","report","apiRunner","store","getNode","boundActionCreators","deleteNode","discoverPluginsWithoutNodes","storeState","nodeCreationPlugins","without","union","apiToPlugins","sourceNodes","nodeOwners","uniq","Array","from","nodes","values","reduce","acc","node","push","internal","owner","difference","module","exports","parentSpan","traceId","waitForCascadingActions","state","getState","pluginsWithNoNodes","map","name","warn","touchedNodes","Object","keys","nodesTouched","staleNodes","filter","rootNode","whileCount","parent","undefined","console","log","includes","id","length","forEach"],"mappings":";;;;;;AAAA,MAAMA,IAAIC,QAAS,QAAT,CAAV;;AACA,MAAMC,SAASD,QAAS,yBAAT,CAAf;;AAEA,MAAME,YAAYF,QAAS,mBAAT,CAAlB;;iBAC2BA,QAAS,UAAT,C;MAAnBG,K,YAAAA,K;MAAOC,O,YAAAA,O;;kBACiBJ,QAAS,kBAAT,C;MAAxBK,mB,aAAAA,mB;;MACAC,U,GAAeD,mB,CAAfC,U;AAER;;;;;AAIA,SAASC,2BAAT,CAAqCC,UAArC,EAAiD;AAC/C;AACA,QAAMC,sBAAsBV,EAAEW,OAAF,CAC1BX,EAAEY,KAAF,CAAQH,WAAWI,YAAX,CAAwBC,WAAhC,CAD0B,EAEzB,qBAFyB,CAA5B,CAF+C,CAM/C;;;AACA,QAAMC,aAAaf,EAAEgB,IAAF,CACjBC,MAAMC,IAAN,CAAWT,WAAWU,KAAX,CAAiBC,MAAjB,EAAX,EAAsCC,MAAtC,CAA6C,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC1DD,QAAIE,IAAJ,CAASD,KAAKE,QAAL,CAAcC,KAAvB;AACA,WAAOJ,GAAP;AACD,GAHD,EAGG,EAHH,CADiB,CAAnB;;AAMA,SAAOtB,EAAE2B,UAAF,CAAajB,mBAAb,EAAkCK,UAAlC,CAAP;AACD;;AAEDa,OAAOC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAO;AAAEC;AAAF,MAAiB,EAAxB,EAA+B;AAC9C,UAAM3B,UAAW,aAAX,EAAyB;AAC7B4B,eAAU,qBADmB;AAE7BC,+BAAyB,IAFI;AAG7BF,kBAAYA;AAHiB,KAAzB,CAAN;AAMA,UAAMG,QAAQ7B,MAAM8B,QAAN,EAAd,CAP8C,CAS9C;;AACA,UAAMC,qBAAqB3B,4BAA4ByB,KAA5B,CAA3B;AACAE,uBAAmBC,GAAnB,CAAuBC,QACrBnC,OAAOoC,IAAP,CACG,OAAMD,IAAK,wDADd,CADF,EAX8C,CAiB9C;;AACA,UAAME,eAAeC,OAAOC,IAAP,CAAYR,MAAMS,YAAlB,CAArB;AACA,UAAMC,aAAa1B,MAAMC,IAAN,CAAWe,MAAMd,KAAN,CAAYC,MAAZ,EAAX,EAAiCwB,MAAjC,CAAwCrB,QAAQ;AACjE;AACA,UAAIsB,WAAWtB,IAAf;AACA,UAAIuB,aAAa,CAAjB;;AACA,aACED,SAASE,MAAT,IACA1C,QAAQwC,SAASE,MAAjB,MAA6BC,SAD7B,IAEAF,aAAa,GAHf,EAIE;AACAD,mBAAWxC,QAAQwC,SAASE,MAAjB,CAAX;AACAD,sBAAc,CAAd;;AACA,YAAIA,aAAa,GAAjB,EAAsB;AACpBG,kBAAQC,GAAR,CACG,+DADH,EAEEL,QAFF;AAID;AACF;;AAED,aAAO,CAAC7C,EAAEmD,QAAF,CAAWZ,YAAX,EAAyBM,SAASO,EAAlC,CAAR;AACD,KApBkB,CAAnB;;AAsBA,QAAIT,WAAWU,MAAX,GAAoB,CAAxB,EAA2B;AACzBV,iBAAWW,OAAX,CAAmB/B,QAAQhB,WAAW;AAAEgB;AAAF,OAAX,CAA3B;AACD;AACF,GA5CD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst apiRunner = require(`./api-runner-node`)\nconst { store, getNode } = require(`../redux`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst { deleteNode } = boundActionCreators\n\n/**\n * Finds the name of all plugins which implement Gatsby APIs that\n * may create nodes, but which have not actually created any nodes.\n */\nfunction discoverPluginsWithoutNodes(storeState) {\n  // Discover which plugins implement APIs which may create nodes\n  const nodeCreationPlugins = _.without(\n    _.union(storeState.apiToPlugins.sourceNodes),\n    `default-site-plugin`\n  )\n  // Find out which plugins own already created nodes\n  const nodeOwners = _.uniq(\n    Array.from(storeState.nodes.values()).reduce((acc, node) => {\n      acc.push(node.internal.owner)\n      return acc\n    }, [])\n  )\n  return _.difference(nodeCreationPlugins, nodeOwners)\n}\n\nmodule.exports = async ({ parentSpan } = {}) => {\n  await apiRunner(`sourceNodes`, {\n    traceId: `initial-sourceNodes`,\n    waitForCascadingActions: true,\n    parentSpan: parentSpan,\n  })\n\n  const state = store.getState()\n\n  // Warn about plugins that should have created nodes but didn't.\n  const pluginsWithNoNodes = discoverPluginsWithoutNodes(state)\n  pluginsWithNoNodes.map(name =>\n    report.warn(\n      `The ${name} plugin has generated no Gatsby nodes. Do you need it?`\n    )\n  )\n\n  // Garbage collect stale data nodes\n  const touchedNodes = Object.keys(state.nodesTouched)\n  const staleNodes = Array.from(state.nodes.values()).filter(node => {\n    // Find the root node.\n    let rootNode = node\n    let whileCount = 0\n    while (\n      rootNode.parent &&\n      getNode(rootNode.parent) !== undefined &&\n      whileCount < 101\n    ) {\n      rootNode = getNode(rootNode.parent)\n      whileCount += 1\n      if (whileCount > 100) {\n        console.log(\n          `It looks like you have a node that's set its parent as itself`,\n          rootNode\n        )\n      }\n    }\n\n    return !_.includes(touchedNodes, rootNode.id)\n  })\n\n  if (staleNodes.length > 0) {\n    staleNodes.forEach(node => deleteNode({ node }))\n  }\n}\n"],"file":"source-nodes.js"}