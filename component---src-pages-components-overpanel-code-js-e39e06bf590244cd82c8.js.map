{"version":3,"sources":["webpack:///./src/pages/components/overpanel/code.js","webpack:///./src/components/subnavigation.js","webpack:///./src/components/codetoggle.js","webpack:///./node_modules/prismjs/plugins/custom-class/prism-custom-class.min.js"],"names":["currentPageNameLower","toLowerCase","OverpanelCode","render","location","this","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_4__","className","_components_subnavigation__WEBPACK_IMPORTED_MODULE_5__","pageName","_components_appcontent__WEBPACK_IMPORTED_MODULE_6__","id","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","pathname","style","marginBottom","_components_codetoggle__WEBPACK_IMPORTED_MODULE_7__","Component","propTypes","prop_types__WEBPACK_IMPORTED_MODULE_3___default","object","isRequired","__webpack_exports__","_ref","sectionName","getPageName","getSectionName","isPartiallyActive","_ref2","isPartiallyCurrent","PartialNavLink","Object","assign","getProps","children","CodeToggle","_this","_React$Component","call","state","showCode","toggleCode","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3___default","setState","prevState","componentDidMount","prismjs__WEBPACK_IMPORTED_MODULE_5___default","highlightAll","plugins","customClass","map","tag","react__WEBPACK_IMPORTED_MODULE_4___default","onClick","global","self","Prism","s","classMap","i","prefix","prefixString","hooks","add","classes"],"mappings":"mMAUMA,EADkB,YACqBC,cAEvCC,4FAGJC,OAAA,WAAS,IACCC,EAAaC,KAAKC,MAAlBF,SAER,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAAA,UAZc,aAadF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,SAAUb,KAEpBO,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBAEbJ,EAAAC,EAAAC,cAAA,MAAIM,GAAG,aAAP,YACER,EAAAC,EAAAC,cAACO,EAAA,KAAD,CAAMC,GAAIb,EAASc,SAAW,cAAeP,UAAU,kDAEzDJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBAEbJ,EAAAC,EAAAC,cAACO,EAAA,KAAD,CAAML,UAAU,yBAAyBM,GAAG,oCAAoCE,MAAO,CAAEC,aAAc,SAAvG,0BAEAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,yxBAwBFd,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAcI,GAAG,mBAA/B,mBACER,EAAAC,EAAAC,cAACO,EAAA,KAAD,CAAMC,GAAIb,EAASc,SAAW,oBAAqBP,UAAU,kDAE/DJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,aAAb,8GAAoIJ,EAAAC,EAAAC,cAAA,uBAApI,IAA2JF,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAhB,aAA3J,KACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aACZJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sCAAJ,IAA0CF,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAhB,gBAC1CJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,wCAAJ,IAA4CF,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAhB,gBAC5CJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,uCAAJ,IAA2CF,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAhB,iBAE7CJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACfJ,EAAAC,EAAAC,cAACY,EAAA,EAAD,6HAzDcd,EAAAC,EAAMc,WAA5BpB,EACGqB,UAAY,CAAEnB,SAAUoB,EAAAhB,EAAUiB,OAAOC,YAuElDC,EAAA,+EC5CAA,EAAA,EArCe,SAAAC,GAA+B,IAA5Bf,EAA4Be,EAA5Bf,SAAUgB,EAAkBD,EAAlBC,YAEP,MAAfA,IACFA,EAAc,cAGC,aAAbhB,EACFA,EAAW,WACW,qBAAbA,EACTA,EAAW,mBACW,kBAAbA,IACTA,EAAW,iBAGb,IAAMiB,EAAcjB,EACdkB,EAAiBF,EAEjBG,EAAoB,SAAAC,GAC1B,OADsDA,EAAzBC,mBAEzB,CAAEvB,UAAW,UACb,CAAEA,UAAW,KAGXwB,EAAiB,SAAA7B,GAAK,OAC1BC,EAAAC,EAAAC,cAACO,EAAA,KAADoB,OAAAC,OAAA,CAAMC,SAAUN,GAAuB1B,GACpCA,EAAMiC,WAIX,OACEhC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXJ,EAAAC,EAAAC,cAAC0B,EAAD,CAAgBlB,GAAKc,EAAiB,IAAMD,EAAe,SAA3D,QACAvB,EAAAC,EAAAC,cAAC0B,EAAD,CAAgBlB,GAAKc,EAAiB,IAAMD,EAAe,eAA3D,sIC/BFU,sBAEJ,SAAAA,EAAYlC,GAAO,IAAAmC,EAAA,OACjBA,EAAAC,EAAAC,KAAAtC,KAAMC,IAAND,MACKuC,MAAQ,CAAEC,UAAU,GACzBJ,EAAKK,WAAaL,EAAKK,WAAWC,KAAhBC,QAAAP,KAHDA,sCAMlBK,WAAA,WACCzC,KAAK4C,SAAS,SAAAC,GAAS,MAAK,CAC1BL,UAAWK,EAAUL,eAIzBM,kBAAA,WACEC,EAAA5C,EAAM6C,kBAGRlD,OAAA,WAGE,OAFAiD,EAAA5C,EAAM8C,QAAQC,YAAYC,IAAI,CAAEC,IAAK,eAGnCC,EAAAlD,EAAAC,cAAA,OAAKE,UAAWN,KAAKuC,MAAMC,SAAW,aAAe,IACnDa,EAAAlD,EAAAC,cAAA,OAAKkD,QAAStD,KAAKyC,WAAYnC,UAAWN,KAAKuC,MAAMC,SAAW,sBAAwB,eAAea,EAAAlD,EAAAC,cAAA,KAAGE,UAAU,gBACpH+C,EAAAlD,EAAAC,cAAA,OAAKE,UAAWN,KAAKuC,MAAMC,SAAW,qBAAuB,iBAC3Da,EAAAlD,EAAAC,cAAA,QAAME,UAAWN,KAAKuC,MAAMC,SAAW,qBAAuB,iBAAkBxC,KAAKC,MAAMiC,gBAzB5EmB,EAAAlD,EAAMc,YA+B/BK,EAAA,0BCnCA,SAAAiC,IAAA,WAAY,uBAAAC,WAAAC,YAAA,IAAAF,KAAAE,MAAA,CAAmF,IAAAC,EAAA,CAAOC,SAAA,IAAaF,MAAAR,QAAAC,YAAA,CAA2BC,IAAA,SAAAS,GAAgBF,EAAAC,SAAAC,GAAaC,OAAA,SAAAD,GAAoBF,EAAAI,aAAAF,IAAkBH,MAAAM,MAAAC,IAAA,gBAAAJ,IAAoCF,EAAAC,UAAAD,EAAAI,gBAAAF,EAAAK,QAAAL,EAAAK,QAAAd,IAAA,SAAAS,GAAmE,OAAAF,EAAAI,cAAA,KAAAJ,EAAAC,SAAAC,aAAxT","file":"component---src-pages-components-overpanel-code-js-e39e06bf590244cd82c8.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../../../components/layout'\nimport SubNav from '../../../components/subnavigation'\nimport AppContent from '../../../components/appcontent'\nimport CodeToggle from '../../../components/codetoggle'\n\nconst currentPageName = \"Overpanel\";\nconst currentPageNameLower = currentPageName.toLowerCase();\n\nclass OverpanelCode extends React.Component {\n  static propTypes = { location: PropTypes.object.isRequired }\n\n  render() {\n    const { location } = this.props;\n\n    return (\n      <Layout>\n        <header className=\"subnav\">\n          <h1>{currentPageName}</h1>\n          <SubNav pageName={currentPageNameLower}/>\n        </header>\n        <AppContent>\n          <div className=\"grid grid-padding\">\n\n            <h2 id=\"overpanel\">Overpanel\n              <Link to={location.pathname + \"/#overpanel\"} className=\"button button--transparent button--copy-link\"></Link>\n            </h2>\n            <div className=\"example-container\">\n\n              <Link className=\"button button--primary\" to=\"../../templates/overpanel-example\" style={{ marginBottom: \"1rem\" }}>View Example Overpanel</Link>\n\n              <CodeToggle>\n{`<div class=\"overpanel\">\n<header class=\"title-bar\">\n  <div class=\"title-content\">\n    <div>\n      <h2>Overpanel Title</h2>\n      <p>Overpanel description</p>\n    </div>\n    <a href=\"/templates/default\">\n      <button class=\"button button--secondary\"><i class=\"dashing-icon dashing-icon--close\"></i> Close</button>\n    </a>\n  </div>\n</header>\n\n<section class=\"content\">\n  <div class=\"grid grid-padding\">\n    <h2>Example Fullscreen Page</h2>\n    <p>This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple!</p>\n  </div>\n</section>\n</div>`}\n              </CodeToggle>\n            </div>\n\n            <h2 className=\"mt-space-xl\" id=\"overpanelWidths\">Overpanel Widths\n              <Link to={location.pathname + \"/#overpanelWidths\"} className=\"button button--transparent button--copy-link\"></Link>\n            </h2>\n            <p className=\"no-margin\">To change the max width of the overpanel and page content, all you need to do is apply an additional class <strong>AFTER</strong> <code className=\"example-text\">overpanel</code>.</p>\n            <ul className=\"no-margin\">\n              <li><strong>Small Width (350px):</strong> <code className=\"example-text\">overpanel-s</code></li>\n              <li><strong>Default Width (800px):</strong> <code className=\"example-text\">overpanel-m</code></li>\n              <li><strong>Large Width (1200px):</strong> <code className=\"example-text\">overpanel-l</code></li>\n            </ul>\n            <div className=\"example-container\">\n              <div className=\"show-code\">\n              <CodeToggle>\n{`<!-- By default the content width is set to overpanel-m -->\n<div class=\"overpanel overpanel-l\">\n...`}\n              </CodeToggle>\n            </div>\n            </div>\n\n          </div>\n        </AppContent>\n      </Layout>\n    )\n  }\n}\n\nexport default OverpanelCode;\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst SubNav = ({ pageName, sectionName }) => {\n\n  if (sectionName == null) {\n    sectionName = \"components\"\n  }\n  //For Component Names with a space\n  if (pageName === \"css grid\") {\n    pageName = \"css-grid\"\n  } else if (pageName === \"progress stepper\") {\n    pageName = \"progress-stepper\"\n  } else if (pageName === \"radio buttons\") {\n    pageName = \"radio-buttons\"\n  }\n\n  const getPageName = pageName;\n  const getSectionName = sectionName;\n\n  const isPartiallyActive = ({ isPartiallyCurrent }) => {\n  return isPartiallyCurrent\n    ? { className: 'active' }\n    : { className: '' }\n  }\n\n  const PartialNavLink = props => (\n    <Link getProps={isPartiallyActive} {...props}>\n      {props.children}\n    </Link>\n  )\n\n  return (\n    <div className=\"subnav-links\">\n        <PartialNavLink to={ getSectionName + \"/\" + getPageName  + \"/code\"}>Code</PartialNavLink>\n        <PartialNavLink to={ getSectionName + \"/\" + getPageName  + \"/guidelines\"}>Guidelines</PartialNavLink>\n    </div>\n  );\n};\n\nexport default SubNav\n","import React from 'react'\nimport Prism from 'prismjs'\nimport 'prismjs/plugins/custom-class/prism-custom-class.min.js'\n\nclass CodeToggle extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n    this.toggleCode = this.toggleCode.bind(this);\n  }\n\n   toggleCode() {\n    this.setState(prevState => ({\n      showCode: !prevState.showCode\n    }));\n  }\n\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n\n  render() {\n    Prism.plugins.customClass.map({ tag: 'exampletag', });\n\n    return (\n      <div className={this.state.showCode ? 'group-open' : ''}>\n        <div onClick={this.toggleCode} className={this.state.showCode ? 'code-toggle is-open' : 'code-toggle'}><i className=\"icon--code\"></i></div>\n        <pre className={this.state.showCode ? 'language-html show' : 'language-html'}>\n          <code className={this.state.showCode ? 'language-html show' : 'language-html'}>{this.props.children}</code>\n        </pre>\n      </div>\n    )\n  }\n}\nexport default CodeToggle;\n","!function(){if(\"undefined\"!=typeof self&&self.Prism||\"undefined\"!=typeof global&&global.Prism){var s={classMap:{}};Prism.plugins.customClass={map:function(i){s.classMap=i},prefix:function(i){s.prefixString=i}},Prism.hooks.add(\"wrap\",function(i){(s.classMap||s.prefixString)&&(i.classes=i.classes.map(function(i){return(s.prefixString||\"\")+(s.classMap[i]||i)}))})}}();"],"sourceRoot":""}