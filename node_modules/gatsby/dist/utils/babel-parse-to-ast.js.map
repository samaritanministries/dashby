{"version":3,"sources":["../../src/utils/babel-parse-to-ast.js"],"names":["parser","require","PARSER_OPTIONS","allowImportExportEverywhere","allowReturnOutsideFunction","allowSuperOutsideMethod","sourceType","sourceFilename","plugins","getBabelParserOptions","filePath","test","map","plugin","babelParseToAst","contents","parse"],"mappings":";;;;;;AACA,MAAMA,SAASC,QAAS,eAAT,CAAf;;AAEA,MAAMC,iBAAiB;AACrBC,+BAA6B,IADR;AAErBC,8BAA4B,IAFP;AAGrBC,2BAAyB,IAHJ;AAIrBC,cAAa,aAJQ;AAKrBC,kBAAgB,IALK;AAMrBC,WAAS,CACN,KADM,EAEN,MAFM,EAGN,eAHM,EAIN,kBAJM,EAKN,YALM,EAMN,iBANM,EAON,wBAPM,EAQN,qBARM,EASN,mBATM,EAUN,qBAVM,EAWN,iBAXM,EAYN,cAZM,EAaN,cAbM,EAcN,eAdM,EAeN,kBAfM,EAgBN,kBAhBM,EAiBN,YAjBM,EAkBN,QAlBM,EAmBN,sBAnBM,EAoBN,kBApBM,EAqBN,kBArBM,EAsBN,2BAtBM;AANY,CAAvB;;AAgCO,SAASC,qBAAT,CAA+BC,QAA/B,EAAiD;AACtD;AACA,MAAI,SAASC,IAAT,CAAcD,QAAd,CAAJ,EAA6B;AAAA,UACnBF,OADmB,GACPN,cADO,CACnBM,OADmB;AAE3B,6BACKN,cADL;AAEEM,eAASA,QAAQI,GAAR,CACPC,UAAWA,WAAY,MAAZ,GAAqB,YAArB,GAAmCA,MADvC;AAFX;AAMD;;AACD,SAAOX,cAAP;AACD;;AAEM,SAASY,eAAT,CAAyBC,QAAzB,EAA2CL,QAA3C,EAA6D;AAClE,SAAOV,OAAOgB,KAAP,CAAaD,QAAb,EAAuBN,sBAAsBC,QAAtB,CAAvB,CAAP;AACD","sourcesContent":["/* @flow */\nconst parser = require(`@babel/parser`)\n\nconst PARSER_OPTIONS = {\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  allowSuperOutsideMethod: true,\n  sourceType: `unambigious`,\n  sourceFilename: true,\n  plugins: [\n    `jsx`,\n    `flow`,\n    `doExpressions`,\n    `objectRestSpread`,\n    `decorators`,\n    `classProperties`,\n    `classPrivateProperties`,\n    `classPrivateMethods`,\n    `exportDefaultFrom`,\n    `exportNamespaceFrom`,\n    `asyncGenerators`,\n    `functionBind`,\n    `functionSent`,\n    `dynamicImport`,\n    `numericSeparator`,\n    `optionalChaining`,\n    `importMeta`,\n    `bigInt`,\n    `optionalCatchBinding`,\n    `throwExpressions`,\n    `pipelineOperator`,\n    `nullishCoalescingOperator`,\n  ],\n}\n\nexport function getBabelParserOptions(filePath: string) {\n  // Flow and typescript plugins can't be enabled simultaneously\n  if (/\\.tsx?/.test(filePath)) {\n    const { plugins } = PARSER_OPTIONS\n    return {\n      ...PARSER_OPTIONS,\n      plugins: plugins.map(\n        plugin => (plugin === `flow` ? `typescript` : plugin)\n      ),\n    }\n  }\n  return PARSER_OPTIONS\n}\n\nexport function babelParseToAst(contents: string, filePath: string) {\n  return parser.parse(contents, getBabelParserOptions(filePath))\n}\n"],"file":"babel-parse-to-ast.js"}