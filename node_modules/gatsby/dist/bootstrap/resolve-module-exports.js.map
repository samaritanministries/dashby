{"version":3,"sources":["../../src/bootstrap/resolve-module-exports.js"],"names":["fs","require","traverse","default","get","babelParseToAst","report","module","exports","modulePath","resolver","resolve","absPath","exportNames","err","code","readFileSync","ast","isCommonJS","isES6","ImportDeclaration","astPath","ExportNamedDeclaration","exportName","push","AssignmentExpression","nodeLeft","node","left","type","property","name","process","env","NODE_ENV","panic"],"mappings":";;AACA,MAAMA,KAAKC,QAAS,IAAT,CAAX;;AACA,MAAMC,WAAWD,QAAS,gBAAT,EAA0BE,OAA3C;;AACA,MAAMC,MAAMH,QAAS,YAAT,CAAZ;;iBAC4BA,QAAS,6BAAT,C;MAApBI,e,YAAAA,e;;AACR,MAAMC,SAASL,QAAS,yBAAT,CAAf;AAEA;;;;;;;;;;;AASAM,OAAOC,OAAP,GAAiB,CAACC,UAAD,EAAaC,WAAWT,QAAQU,OAAhC,KAA4C;AAC3D,MAAIC,OAAJ;AACA,QAAMC,cAAc,EAApB;;AAEA,MAAI;AACFD,cAAUF,SAASD,UAAT,CAAV;AACD,GAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,WAAOD,WAAP,CADY,CACO;AACpB;;AACD,QAAME,OAAOf,GAAGgB,YAAH,CAAgBJ,OAAhB,EAA0B,MAA1B,CAAb,CAT2D,CASb;;AAE9C,QAAMK,MAAMZ,gBAAgBU,IAAhB,EAAsBH,OAAtB,CAAZ;AAEA,MAAIM,aAAa,KAAjB;AACA,MAAIC,QAAQ,KAAZ,CAd2D,CAgB3D;;AACAjB,WAASe,GAAT,EAAc;AACZ;AACAG,uBAAmB,SAASA,iBAAT,CAA2BC,OAA3B,EAAoC;AACrDF,cAAQ,IAAR;AACD,KAJW;AAMZ;AACAG,4BAAwB,SAASA,sBAAT,CAAgCD,OAAhC,EAAyC;AAC/D,YAAME,aAAanB,IACjBiB,OADiB,EAEhB,0CAFgB,CAAnB;AAIAF,cAAQ,IAAR;AACA,UAAII,UAAJ,EAAgBV,YAAYW,IAAZ,CAAiBD,UAAjB;AACjB,KAdW;AAeZE,0BAAsB,SAASA,oBAAT,CAA8BJ,OAA9B,EAAuC;AAC3D,YAAMK,WAAWL,QAAQM,IAAR,CAAaC,IAA9B;AAEA,UAAIF,SAASG,IAAT,KAAmB,kBAAvB,EAA0C,OAHiB,CAK3D;;AACA,UAAIzB,IAAIsB,QAAJ,EAAe,aAAf,MAAkC,SAAtC,EAAgD;AAC9CR,qBAAa,IAAb;AACAL,oBAAYW,IAAZ,CAAiBE,SAASI,QAAT,CAAkBC,IAAnC;AACD,OAT0D,CAW3D;;;AACA,UACE3B,IAAIsB,QAAJ,EAAe,oBAAf,MAAyC,QAAzC,IACAtB,IAAIsB,QAAJ,EAAe,sBAAf,MAA2C,SAF7C,EAGE;AACAR,qBAAa,IAAb;AACAL,oBAAYW,IAAZ,CAAiBE,SAASI,QAAT,CAAkBC,IAAnC;AACD;AACF;AAlCW,GAAd;;AAqCA,MAAIZ,SAASD,UAAT,IAAuBc,QAAQC,GAAR,CAAYC,QAAZ,KAA0B,MAArD,EAA4D;AAC1D5B,WAAO6B,KAAP,CACG;;;UAGG1B,UAAW;;;;OAJjB;AAUD;;AACD,SAAOI,WAAP;AACD,CAnED","sourcesContent":["// @flow\nconst fs = require(`fs`)\nconst traverse = require(`babel-traverse`).default\nconst get = require(`lodash/get`)\nconst { babelParseToAst } = require(`../utils/babel-parse-to-ast`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\n/**\n * Given a `require.resolve()` compatible path pointing to a JS module,\n * return an array listing the names of the module's exports.\n *\n * Returns [] for invalid paths and modules without exports.\n *\n * @param {string} modulePath\n * @param {function} resolver\n */\nmodule.exports = (modulePath, resolver = require.resolve) => {\n  let absPath\n  const exportNames = []\n\n  try {\n    absPath = resolver(modulePath)\n  } catch (err) {\n    return exportNames // doesn't exist\n  }\n  const code = fs.readFileSync(absPath, `utf8`) // get file contents\n\n  const ast = babelParseToAst(code, absPath)\n\n  let isCommonJS = false\n  let isES6 = false\n\n  // extract names of exports from file\n  traverse(ast, {\n    // Check if the file is using ES6 imports\n    ImportDeclaration: function ImportDeclaration(astPath) {\n      isES6 = true\n    },\n\n    // get foo from `export const foo = bar`\n    ExportNamedDeclaration: function ExportNamedDeclaration(astPath) {\n      const exportName = get(\n        astPath,\n        `node.declaration.declarations[0].id.name`\n      )\n      isES6 = true\n      if (exportName) exportNames.push(exportName)\n    },\n    AssignmentExpression: function AssignmentExpression(astPath) {\n      const nodeLeft = astPath.node.left\n\n      if (nodeLeft.type !== `MemberExpression`) return\n\n      // get foo from `exports.foo = bar`\n      if (get(nodeLeft, `object.name`) === `exports`) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n\n      // get foo from `module.exports.foo = bar`\n      if (\n        get(nodeLeft, `object.object.name`) === `module` &&\n        get(nodeLeft, `object.property.name`) === `exports`\n      ) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n    },\n  })\n\n  if (isES6 && isCommonJS && process.env.NODE_ENV !== `test`) {\n    report.panic(\n      `This plugin file is using both CommonJS and ES6 module systems together which we don't support.\nYou'll need to edit the file to use just one or the other.\n\nplugin: ${modulePath}.js\n\nThis didn't cause a problem in Gatsby v1 so you might want to review the migration doc for this:\nhttps://gatsby.app/no-mixed-modules\n      `\n    )\n  }\n  return exportNames\n}\n"],"file":"resolve-module-exports.js"}