{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-runner.js"],"names":["fs","require","report","websocketManager","path","store","generatePathChunkName","formatErrorDetails","mod","resultHashes","module","exports","queryJob","component","getState","schema","program","graphql","query","context","result","errors","errorDetails","Map","set","isPage","JSON","stringify","pluginCreatorId","log","componentPath","_","process","exit","Object","assign","pageContext","jsonName","internalComponentName","componentChunkName","updatedAt","pluginCreator___NODE","resultJSON","resultHash","createHash","update","digest","replace","dataPath","hash","programType","emitPageData","id","emitStaticQueryData","modInt","toString","resultPath","join","directory","outputFile","dispatch","type","payload","key","value"],"mappings":"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","sourcesContent":["// @flow\n\nimport { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs-extra`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst websocketManager = require(`../../utils/websocket-manager`)\n\nconst path = require(`path`)\nconst { store } = require(`../../redux`)\nconst { generatePathChunkName } = require(`../../utils/js-chunk-names`)\nconst { formatErrorDetails } = require(`./utils`)\nconst mod = require(`hash-mod`)(999)\n\nconst resultHashes = {}\n\ntype QueryJob = {\n  id: string,\n  hash?: string,\n  jsonName: string,\n  query: string,\n  componentPath: string,\n  context: Object,\n  isPage: Boolean,\n}\n\n// Run query\nmodule.exports = async (queryJob: QueryJob, component: Any) => {\n  const { schema, program } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(schema, query, context, context, context)\n\n  // Run query\n  let result\n\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(queryJob.query, queryJob.context)\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    const errorDetails = new Map()\n    errorDetails.set(`Errors`, result.errors || [])\n    if (queryJob.isPage) {\n      errorDetails.set(`URL path`, queryJob.context.path)\n      errorDetails.set(\n        `Context`,\n        JSON.stringify(queryJob.context.context, null, 2)\n      )\n    }\n    errorDetails.set(`Plugin`, queryJob.pluginCreatorId || `none`)\n    errorDetails.set(`Query`, queryJob.query)\n\n    report.log(`\nThe GraphQL query from ${queryJob.componentPath} failed.\n\n${formatErrorDetails(errorDetails)}`)\n\n    // Perhaps this isn't the best way to see if we're building?\n    if (program._[0] === `build`) {\n      process.exit(1)\n    }\n  }\n\n  // Add the page context onto the results.\n  if (queryJob && queryJob.isPage) {\n    result[`pageContext`] = Object.assign({}, queryJob.context)\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.jsonName\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = require(`crypto`)\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n    // Remove potentially unsafe characters. This increases chances of collisions\n    // slightly but it should still be very safe + we get a shorter\n    // url vs hex.\n    .replace(/[^a-zA-Z0-9-_]/g, ``)\n\n  let dataPath\n  if (queryJob.isPage) {\n    dataPath = `${generatePathChunkName(queryJob.jsonName)}-${resultHash}`\n  } else {\n    dataPath = queryJob.hash\n  }\n\n  const programType = program._[0]\n\n  if (programType === `develop`) {\n    if (queryJob.isPage) {\n      websocketManager.emitPageData({\n        result,\n        id: queryJob.id,\n      })\n    } else {\n      websocketManager.emitStaticQueryData({\n        result,\n        id: queryJob.id,\n      })\n    }\n  }\n\n  if (resultHashes[queryJob.id] !== resultHash) {\n    resultHashes[queryJob.id] = resultHash\n    let modInt = ``\n    // We leave StaticQuery results at public/static/d\n    // as the babel plugin has that path hard-coded\n    // for importing static query results.\n    if (queryJob.isPage) {\n      modInt = mod(dataPath).toString()\n    }\n\n    // Always write file to public/static/d/ folder.\n    const resultPath = path.join(\n      program.directory,\n      `public`,\n      `static`,\n      `d`,\n      modInt,\n      `${dataPath}.json`\n    )\n\n    if (queryJob.isPage) {\n      dataPath = `${modInt}/${dataPath}`\n    }\n\n    await fs.outputFile(resultPath, resultJSON)\n\n    store.dispatch({\n      type: `SET_JSON_DATA_PATH`,\n      payload: {\n        key: queryJob.jsonName,\n        value: dataPath,\n      },\n    })\n\n    return result\n  }\n\n  return result\n}\n"],"file":"query-runner.js"}