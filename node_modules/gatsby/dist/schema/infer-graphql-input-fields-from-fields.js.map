{"version":3,"sources":["../../src/schema/infer-graphql-input-fields-from-fields.js"],"names":["require","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLID","GraphQLList","GraphQLEnumType","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","_","report","createTypeName","createKey","makeNullable","type","ofType","convertToInputType","typeMap","has","nextTypeMap","Set","Array","from","concat","fields","transform","getFields","out","fieldConfig","key","Object","keys","length","name","innerType","message","verbose","scalarFilterMap","Int","eq","ne","gt","gte","lt","lte","in","Float","ID","String","regex","glob","Boolean","convertToInputFilter","prefix","upperFirst","innerFilter","innerFields","elemMatch","extractFieldNamesFromInputField","accu","push","each","inferInputObjectStructureFromFields","typeName","inferredFields","sort","inputType","inputFilter"],"mappings":"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","sourcesContent":["// @flow\n\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLID,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} = require(`graphql`)\n\nimport type { GraphQLInputType, GraphQLType } from \"graphql\"\n\nconst _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\n\ntype GraphQLNullableInputType<T> =\n  | GraphQLScalarType\n  | GraphQLEnumType\n  | GraphQLInputObjectType\n  | GraphQLList<T>\n\nfunction makeNullable(type: GraphQLInputType): GraphQLNullableInputType<any> {\n  if (type instanceof GraphQLNonNull) {\n    return type.ofType\n  }\n  return type\n}\n\nfunction convertToInputType(\n  type: GraphQLType,\n  typeMap: Set<GraphQLType>\n): ?GraphQLInputType {\n  // track types already processed in current tree, to avoid infinite recursion\n  if (typeMap.has(type)) {\n    return null\n  }\n  const nextTypeMap = new Set(Array.from(typeMap).concat([type]))\n\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLEnumType) {\n    return type\n  } else if (type instanceof GraphQLObjectType) {\n    const fields = _.transform(type.getFields(), (out, fieldConfig, key) => {\n      const type = convertToInputType(fieldConfig.type, nextTypeMap)\n      if (type) out[key] = { type }\n    })\n    if (Object.keys(fields).length === 0) {\n      return null\n    }\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${type.name}InputObject`),\n      fields,\n    })\n  } else if (type instanceof GraphQLList) {\n    let innerType = convertToInputType(type.ofType, nextTypeMap)\n    return innerType ? new GraphQLList(makeNullable(innerType)) : null\n  } else if (type instanceof GraphQLNonNull) {\n    let innerType = convertToInputType(type.ofType, nextTypeMap)\n    return innerType ? new GraphQLNonNull(makeNullable(innerType)) : null\n  } else {\n    let message = type ? `for type: ${type.name}` : ``\n    if (type instanceof GraphQLInterfaceType) {\n      message = `GraphQLInterfaceType not yet implemented ${message}`\n    } else if (type instanceof GraphQLUnionType) {\n      message = `GraphQLUnionType not yet implemented ${message}`\n    } else {\n      message = `Invalid input type ${message}`\n    }\n    report.verbose(message)\n  }\n\n  return null\n}\n\nconst scalarFilterMap = {\n  Int: {\n    eq: { type: GraphQLInt },\n    ne: { type: GraphQLInt },\n    gt: { type: GraphQLInt },\n    gte: { type: GraphQLInt },\n    lt: { type: GraphQLInt },\n    lte: { type: GraphQLInt },\n    in: { type: new GraphQLList(GraphQLInt) },\n  },\n  Float: {\n    eq: { type: GraphQLFloat },\n    ne: { type: GraphQLFloat },\n    gt: { type: GraphQLFloat },\n    gte: { type: GraphQLFloat },\n    lt: { type: GraphQLFloat },\n    lte: { type: GraphQLFloat },\n    in: { type: new GraphQLList(GraphQLFloat) },\n  },\n  ID: {\n    eq: { type: GraphQLID },\n    ne: { type: GraphQLID },\n    in: { type: new GraphQLList(GraphQLID) },\n  },\n  String: {\n    eq: { type: GraphQLString },\n    ne: { type: GraphQLString },\n    regex: { type: GraphQLString },\n    glob: { type: GraphQLString },\n    in: { type: new GraphQLList(GraphQLString) },\n  },\n  Boolean: {\n    eq: { type: GraphQLBoolean },\n    ne: { type: GraphQLBoolean },\n    in: { type: new GraphQLList(GraphQLBoolean) },\n  },\n}\n\nfunction convertToInputFilter(\n  prefix: string,\n  type: GraphQLInputType\n): ?GraphQLInputObjectType {\n  if (type instanceof GraphQLScalarType) {\n    const name = type.name\n    const fields = scalarFilterMap[name]\n\n    if (fields == null) return null\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}Query${name}`),\n      fields: fields,\n    })\n  } else if (type instanceof GraphQLInputObjectType) {\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}{type.name}`),\n      fields: _.transform(type.getFields(), (out, fieldConfig, key) => {\n        const type = convertToInputFilter(\n          `${prefix}${_.upperFirst(key)}`,\n          fieldConfig.type\n        )\n        if (type) out[key] = { type }\n      }),\n    })\n  } else if (type instanceof GraphQLList) {\n    const innerType = type.ofType\n    const innerFilter = convertToInputFilter(`${prefix}ListElem`, innerType)\n    const innerFields = innerFilter ? innerFilter.getFields() : {}\n\n    let fields\n    if (innerType instanceof GraphQLInputObjectType) {\n      fields = {\n        elemMatch: { type: innerFilter },\n      }\n    } else {\n      fields = {\n        ...innerFields,\n        in: { type: new GraphQLList(innerType) },\n      }\n    }\n\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}QueryList`),\n      fields,\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    return convertToInputFilter(prefix, type.ofType)\n  }\n\n  return null\n}\n\nfunction extractFieldNamesFromInputField(\n  prefix: string,\n  type: GraphQLInputType,\n  accu: string[]\n) {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLList) {\n    accu.push(prefix)\n  } else if (type instanceof GraphQLInputObjectType) {\n    _.each(type.getFields(), (fieldConfig, key) => {\n      extractFieldNamesFromInputField(\n        `${prefix}___${key}`,\n        fieldConfig.type,\n        accu\n      )\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    extractFieldNamesFromInputField(prefix, type.ofType, accu)\n  }\n}\n\n// convert output fields to output fields and a list of fields to sort on\nexport function inferInputObjectStructureFromFields({\n  fields,\n  typeName = ``,\n}: any) {\n  const inferredFields = {}\n  const sort = []\n\n  _.each(fields, (fieldConfig, key) => {\n    const inputType = convertToInputType(fieldConfig.type, new Set())\n    const inputFilter =\n      inputType && convertToInputFilter(_.upperFirst(key), inputType)\n\n    if (!inputFilter) return\n\n    inferredFields[createKey(key)] = { type: inputFilter }\n\n    // Add sorting (but only to the top level).\n    if (typeName) {\n      extractFieldNamesFromInputField(key, inputType, sort)\n    }\n  })\n\n  return { inferredFields, sort }\n}\n"],"file":"infer-graphql-input-fields-from-fields.js"}