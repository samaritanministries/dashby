{"version":3,"sources":["../../../src/internal-plugins/query-runner/redirects-writer.js"],"names":["lastHash","writeRedirects","bootstrapFinished","store","getState","program","redirects","browserRedirects","filter","r","redirectInBrowser","newHash","crypto","createHash","update","JSON","stringify","digest","Promise","resolve","fs","writeFile","directory","exports","oldRedirects","debouncedWriteRedirects","_","debounce","isEqual","Redirects","emitter","on"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAIA,WAAW,IAAf;;AAEA,MAAMC;AAAA;AAAA;AAAA,6CAAiB,aAAY;AACjCC,wBAAoB,IAApB;;AADiC,0BAGJC,aAAMC,QAAN,EAHI;AAAA,QAG3BC,OAH2B,mBAG3BA,OAH2B;AAAA,QAGlBC,SAHkB,mBAGlBA,SAHkB,EAKjC;;;AACA,UAAMC,mBAAmBD,UAAUE,MAAV,CAAiBC,KAAKA,EAAEC,iBAAxB,CAAzB;;AAEA,UAAMC,UAAUC,gBACbC,UADa,CACD,KADC,EAEbC,MAFa,CAENC,KAAKC,SAAL,CAAeT,gBAAf,CAFM,EAGbU,MAHa,CAGL,KAHK,CAAhB;;AAKA,QAAIN,YAAYX,QAAhB,EAA0B;AACxB,aAAOkB,QAAQC,OAAR,EAAP;AACD;;AAEDnB,eAAWW,OAAX;AAEA,iBAAaS,iBAAGC,SAAH,CACX,oBAAShB,QAAQiB,SAAjB,EAA6B,uBAA7B,CADW,EAEXP,KAAKC,SAAL,CAAeT,gBAAf,EAAiC,IAAjC,EAAuC,CAAvC,CAFW,CAAb;AAID,GAvBK;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAyBAgB,QAAQtB,cAAR,GAAyBA,cAAzB;AAEA,IAAIC,oBAAoB,KAAxB;AACA,IAAIsB,YAAJ;;AACA,MAAMC,0BAA0BC,gBAAEC,QAAF,CAAW,MAAM;AAC/C;AACA,MACEzB,qBACA,CAACwB,gBAAEE,OAAF,CAAUJ,YAAV,EAAwBrB,aAAMC,QAAN,GAAiBE,SAAzC,CAFH,EAGE;AACAL;AACAuB,mBAAerB,aAAMC,QAAN,GAAiByB,SAAhC;AACD;AACF,CAT+B,EAS7B,GAT6B,CAAhC;;AAWAC,eAAQC,EAAR,CAAY,iBAAZ,EAA8B,MAAM;AAClCN;AACD,CAFD","sourcesContent":["import _ from \"lodash\"\nimport crypto from \"crypto\"\nimport fs from \"fs-extra\"\nimport { store, emitter } from \"../../redux/\"\nimport { joinPath } from \"../../utils/path\"\n\nlet lastHash = null\n\nconst writeRedirects = async () => {\n  bootstrapFinished = true\n\n  let { program, redirects } = store.getState()\n\n  // Filter for redirects that are meant for the browser.\n  const browserRedirects = redirects.filter(r => r.redirectInBrowser)\n\n  const newHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(browserRedirects))\n    .digest(`hex`)\n\n  if (newHash === lastHash) {\n    return Promise.resolve()\n  }\n\n  lastHash = newHash\n\n  return await fs.writeFile(\n    joinPath(program.directory, `.cache/redirects.json`),\n    JSON.stringify(browserRedirects, null, 2)\n  )\n}\n\nexports.writeRedirects = writeRedirects\n\nlet bootstrapFinished = false\nlet oldRedirects\nconst debouncedWriteRedirects = _.debounce(() => {\n  // Don't write redirects again until bootstrap has finished.\n  if (\n    bootstrapFinished &&\n    !_.isEqual(oldRedirects, store.getState().redirects)\n  ) {\n    writeRedirects()\n    oldRedirects = store.getState().Redirects\n  }\n}, 250)\n\nemitter.on(`CREATE_REDIRECT`, () => {\n  debouncedWriteRedirects()\n})\n"],"file":"redirects-writer.js"}