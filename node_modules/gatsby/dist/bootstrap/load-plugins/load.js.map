{"version":3,"sources":["../../../src/bootstrap/load-plugins/load.js"],"names":["_","require","slash","fs","path","crypto","glob","store","existsSync","sync","createFileContentHash","root","globPattern","hash","createHash","files","nodir","forEach","filepath","update","readFileSync","digest","resolvePlugin","pluginName","resolvedPath","resolve","packageJSON","JSON","parse","name","id","version","Error","dirname","err","module","exports","config","plugins","processPlugin","plugin","isString","info","pluginOptions","subplugins","options","p","push","merge","internalPlugins","relPath","absPath","join","__dirname","process","cwd","program","getState","directory","pathCheck"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs`)\nconst path = require(`path`)\nconst crypto = require(`crypto`)\nconst glob = require(`glob`)\nconst { store } = require(`../../redux`)\nconst existsSync = require(`fs-exists-cached`).sync\n\nfunction createFileContentHash(root, globPattern) {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * @typedef {Object} PluginInfo\n * @property {string} resolve The absolute path to the plugin\n * @property {string} name The plugin name\n * @property {string} version The plugin version (can be content hash)\n */\n\n/**\n * resolvePlugin\n * @param {string} pluginName\n * This can be a name of a local plugin, the name of a plugin located in\n * node_modules, or a Gatsby internal plugin. In the last case the pluginName\n * will be an absolute path.\n * @return {PluginInfo}\n */\nfunction resolvePlugin(pluginName) {\n  // Only find plugins when we're not given an absolute path\n  if (!existsSync(pluginName)) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))\n\n    if (existsSync(resolvedPath)) {\n      if (existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        )\n\n        return {\n          resolve: resolvedPath,\n          name: packageJSON.name || pluginName,\n          id: `Plugin ${packageJSON.name || pluginName}`,\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const resolvedPath = slash(path.dirname(require.resolve(pluginName)))\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n\n    return {\n      resolve: resolvedPath,\n      id: `Plugin ${packageJSON.name}`,\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    throw new Error(`Unable to find plugin \"${pluginName}\"`)\n  }\n}\n\nmodule.exports = async (config = {}) => {\n  // Instantiate plugins.\n  const plugins = []\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  const processPlugin = plugin => {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      // Plugins can have plugins.\n      const subplugins = []\n      if (plugin.options && plugin.options.plugins) {\n        plugin.options.plugins.forEach(p => {\n          subplugins.push(processPlugin(p))\n        })\n\n        plugin.options.plugins = subplugins\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        return {\n          name: `TEST`,\n          pluginOptions: {\n            plugins: [],\n          },\n        }\n      }\n\n      const info = resolvePlugin(plugin.resolve)\n\n      return {\n        ...info,\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/dev-404-page`,\n    `../../internal-plugins/load-babel-config`,\n    `../../internal-plugins/internal-data-bridge`,\n    `../../internal-plugins/prod-404`,\n    `../../internal-plugins/query-runner`,\n  ]\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      plugins.push(processPlugin(plugin))\n    })\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: `Plugin default-site-plugin`,\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  const program = store.getState().program\n  plugins.push(\n    processPlugin({\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: slash(path.join(program.directory, `src/pages`)),\n        pathCheck: false,\n      },\n    })\n  )\n\n  return plugins\n}\n"],"file":"load.js"}