{"version":3,"sources":["../../../src/internal-plugins/query-runner/page-query-runner.js"],"names":["_","require","queue","store","emitter","queuedDirtyActions","active","running","runQueriesForPathnamesQueue","Set","exports","queueQueryForPathname","pathname","add","runInitialQueries","runQueries","uniq","a","payload","id","dirtyIds","findDirtyIds","cleanIds","findIdsWithoutDataDependencies","pathnamesToRun","clear","runQueriesForPathnames","on","action","push","runQueuedActions","length","seenIdsWithoutDataDependencies","state","getState","allTrackedIds","flatten","concat","values","componentDataDependencies","nodes","connections","notTrackedIds","difference","Array","from","pages","p","path","staticQueryComponents","map","c","jsonName","pathnames","staticQueries","filter","slice","pageQueries","forEach","staticQueryComponent","get","queryJob","hash","query","componentPath","context","didNotQueueItems","page","components","isPage","Promise","resolve","actions","uniqDirties","reduce","node","internal","type","compact"],"mappings":"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","sourcesContent":["// @flow\n\nimport type { QueryJob } from \"../query-runner\"\n\n/**\n * Jobs of this module\n * - Ensure on bootstrap that all invalid page queries are run and report\n *   when this is done\n * - Watch for when a page's query is invalidated and re-run it.\n */\n\nconst _ = require(`lodash`)\n\nconst queue = require(`./query-queue`)\nconst { store, emitter } = require(`../../redux`)\n\nlet queuedDirtyActions = []\nlet active = false\nlet running = false\n\nconst runQueriesForPathnamesQueue = new Set()\nexports.queueQueryForPathname = pathname => {\n  runQueriesForPathnamesQueue.add(pathname)\n}\n\n// Do initial run of graphql queries during bootstrap.\n// Afterwards we listen \"API_RUNNING_QUEUE_EMPTY\" and check\n// for dirty nodes before running queries.\nexports.runInitialQueries = async () => {\n  await runQueries()\n\n  active = true\n  return\n}\n\nconst runQueries = async () => {\n  // Find paths dependent on dirty nodes\n  queuedDirtyActions = _.uniq(queuedDirtyActions, a => a.payload.id)\n  const dirtyIds = findDirtyIds(queuedDirtyActions)\n  queuedDirtyActions = []\n\n  // Find ids without data dependencies (i.e. no queries have been run for\n  // them before) and run them.\n  const cleanIds = findIdsWithoutDataDependencies()\n\n  // Construct paths for all queries to run\n  const pathnamesToRun = _.uniq([\n    ...runQueriesForPathnamesQueue,\n    ...dirtyIds,\n    ...cleanIds,\n  ])\n\n  runQueriesForPathnamesQueue.clear()\n\n  // Run these paths\n  await runQueriesForPathnames(pathnamesToRun)\n  return\n}\n\nemitter.on(`CREATE_NODE`, action => {\n  queuedDirtyActions.push(action)\n})\n\nemitter.on(`DELETE_NODE`, action => {\n  queuedDirtyActions.push({ payload: action.payload })\n})\n\nconst runQueuedActions = async () => {\n  if (active && !running) {\n    try {\n      running = true\n      await runQueries()\n    } finally {\n      running = false\n      if (queuedDirtyActions.length > 0) {\n        runQueuedActions()\n      }\n    }\n  }\n}\nexports.runQueuedActions = runQueuedActions\n\n// Wait until all plugins have finished running (e.g. various\n// transformer plugins) before running queries so we don't\n// query things in a 1/2 finished state.\nemitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedActions)\n\nlet seenIdsWithoutDataDependencies = []\nconst findIdsWithoutDataDependencies = () => {\n  const state = store.getState()\n  const allTrackedIds = _.uniq(\n    _.flatten(\n      _.concat(\n        _.values(state.componentDataDependencies.nodes),\n        _.values(state.componentDataDependencies.connections)\n      )\n    )\n  )\n\n  // Get list of paths not already tracked and run the queries for these\n  // paths.\n  const notTrackedIds = _.difference(\n    [\n      ...Array.from(state.pages.values(), p => p.path),\n      ...[...state.staticQueryComponents.values()].map(c => c.jsonName),\n    ],\n    [...allTrackedIds, ...seenIdsWithoutDataDependencies]\n  )\n\n  // Add new IDs to our seen array so we don't keep trying to run queries for them.\n  // Pages without queries can't be tracked.\n  seenIdsWithoutDataDependencies = _.uniq([\n    ...notTrackedIds,\n    ...seenIdsWithoutDataDependencies,\n  ])\n\n  return notTrackedIds\n}\n\nconst runQueriesForPathnames = pathnames => {\n  const staticQueries = pathnames.filter(p => p.slice(0, 4) === `sq--`)\n  const pageQueries = pathnames.filter(p => p.slice(0, 4) !== `sq--`)\n  const state = store.getState()\n\n  staticQueries.forEach(id => {\n    const staticQueryComponent = store.getState().staticQueryComponents.get(id)\n    const queryJob: QueryJob = {\n      id: staticQueryComponent.hash,\n      hash: staticQueryComponent.hash,\n      jsonName: staticQueryComponent.jsonName,\n      query: staticQueryComponent.query,\n      componentPath: staticQueryComponent.componentPath,\n      context: { path: staticQueryComponent.jsonName },\n    }\n    queue.push(queryJob)\n  })\n\n  const pages = state.pages\n  let didNotQueueItems = true\n  pageQueries.forEach(id => {\n    const page = pages.get(id)\n    if (page) {\n      didNotQueueItems = false\n      queue.push(\n        ({\n          id: page.path,\n          jsonName: page.jsonName,\n          query: store.getState().components.get(page.componentPath).query,\n          isPage: true,\n          componentPath: page.componentPath,\n          context: {\n            ...page,\n            ...page.context,\n          },\n        }: QueryJob)\n      )\n    }\n  })\n\n  if (didNotQueueItems || !pathnames || pathnames.length === 0) {\n    return Promise.resolve()\n  }\n\n  return new Promise(resolve => {\n    queue.on(`drain`, () => {\n      resolve()\n    })\n  })\n}\n\nconst findDirtyIds = actions => {\n  const state = store.getState()\n  const uniqDirties = _.uniq(\n    actions.reduce((dirtyIds, action) => {\n      const node = action.payload\n\n      if (!node || !node.id || !node.internal.type) return dirtyIds\n\n      // Find components that depend on this node so are now dirty.\n      dirtyIds = dirtyIds.concat(state.componentDataDependencies.nodes[node.id])\n\n      // Find connections that depend on this node so are now invalid.\n      dirtyIds = dirtyIds.concat(\n        state.componentDataDependencies.connections[node.internal.type]\n      )\n\n      return _.compact(dirtyIds)\n    }, [])\n  )\n  return uniqDirties\n}\n"],"file":"page-query-runner.js"}