/*
_______   _______ ___________ ________  ________ _   _ _____ ___  _
|  ___\ \ / / ___ \  ___| ___ \_   _|  \/  |  ___| \ | |_   _/ _ \| |
| |__  \ V /| |_/ / |__ | |_/ / | | | .  . | |__ |  \| | | |/ /_\ \ |
|  __| /   \|  __/|  __||    /  | | | |\/| |  __|| . ` | | ||  _  | |
| |___/ /^\ \ |   | |___| |\ \ _| |_| |  | | |___| |\  | | || | | | |____
\____/\/   \|_|   \____/\_| \_|\___/\_|  |_|____/\_| \_/ \_/\_| |_|_____/

This is an EXPERIMENT and is in no way ready to be included in production!
*/

.paragrid {
  display: grid;//grid
  grid-template-columns: 1fr;

  @media #{$tablet} {
  // display: grid;
  // grid-template-columns: repeat(4, 3fr auto);
  grid-template-columns: 2fr 1fr; //this would be equiv. to 33.3333% and 66.6666% or vice-versa

  //The problem begins here, fallbacks can't know what grid is trying to do. Unless we know how many columns are going to show up, there's just no way of knowing what the percentage of anything else should be. This could be solved by applying some sort of class to assign the divisions? Maybe? ie. .two-third/one-third which says divs will be a certain size.... this is getting complicated though.

  //If we used flex, we could do flex by rows.

  // grid-template-areas:
  // "seven seven seven"
  // "two   one   one";
  }

  // .fallback-paragrid {
  //   :nth-child(odd) { width: 66.6666%; }
  //   :nth-child(even) { width: 33.3333%; }
  // }

  &.reverse {
    grid-template-columns: 1fr 2fr;
  }

  .seven {
    // grid-area: seven;
    grid-column: 1 / -1;
  }

  .one {
    // grid-area: one;
  }

  .two {
    // grid-area: two;
  }

  .grid-style {
    display: flex;
    text-align: center;
    // padding: $grid-gutter;
    // color: $white;
    border: 2px solid $blue-800;
    background-color: $blue;
    align-items: center;
    justify-content: center;
    float: left;//Fallback
  }
}

.paragrid {
  & > * { width: 100%; }
  @media #{$tablet} {
    & > * { width: auto; }
  }
}
// @supports (display: grid) { .paragrid > * { width: auto; } }

//We could have spans for 1-6 or whatever
.span-1 {
  grid-column: span 1;
}

.span-2 {
  grid-column: span 2;
}

.span-3 {
  grid-column: span 3;
}

.span-4 {
  grid-column: span 4;
}

.span-5 {
  grid-column: span 5;
}

.span-6 {
  grid-column: span 6;
}

//Other Thoughts:
//Cards

.card {
  padding: 1rem;
}
