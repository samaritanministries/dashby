{"version":3,"sources":["webpack:///./src/pages/templates/overpanel.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","a","createElement","className","to","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","InternalPageRenderer","Object","assign","json"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAA,EAAA,KAKeE,EAAA,0BAEdE,EAAAG,EAAAC,cAAA,OAAKC,UAAU,aACdL,EAAAG,EAAAC,cAAA,UAAQC,UAAU,aACjBL,EAAAG,EAAAC,cAAA,OAAKC,UAAU,iBACdL,EAAAG,EAAAC,cAAA,WACCJ,EAAAG,EAAAC,cAAA,6BACAJ,EAAAG,EAAAC,cAAA,mCAEDJ,EAAAG,EAAAC,cAACF,EAAA,EAAD,CAAMI,GAAI,sBACTN,EAAAG,EAAAC,cAAA,UAAQC,UAAU,4BAA2BL,EAAAG,EAAAC,cAAA,KAAGC,UAAU,qCAA1D,aAKDL,EAAAG,EAAAC,cAAA,WAASC,UAAU,WACpBL,EAAAG,EAAAC,cAAA,OAAKC,UAAU,qBACXL,EAAAG,EAAAC,cAAA,qCACAJ,EAAAG,EAAAC,cAAA,kVCvBP,IAAAL,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAQ,EAAAX,EAAA,IAAAY,EAAAZ,EAAAK,EAAAM,GAAAX,EAAAa,EAAAX,EAAA,sBAAAU,EAAAL,IAAAP,EAAA,KAAAA,EAAA,GAcyBc,QAAOC,QAELC,IAAMC,cAAc,yBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,6ECsBhCK,UAjBU,SAAAC,GAAiC,IAA9BC,EAA8BD,EAA9BC,SAAUC,EAAoBF,EAApBE,cACpC,OAAKA,EAGEV,IAAMR,cAAcmB,IAApBC,OAAAC,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV","file":"component---src-pages-templates-overpanel-js-3bf155b1b78c18d7f16e.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n// The scss needs to be imported here for running 'gatsby build'\nimport '../../sass/example-page/example-page.scss'\n\nexport default () => (\n\n\t<div className=\"overpanel\">\n\t\t<header className=\"title-bar\">\n\t\t\t<div className=\"title-content\">\n\t\t\t\t<div>\n\t\t\t\t\t<h2>Overpanel Title</h2>\n\t\t\t\t\t<p>Overpanel description</p>\n\t\t\t\t</div>\n\t\t\t\t<Link to={\"/templates/default\"}>\n\t\t\t\t\t<button className=\"button button--secondary\"><i className=\"dashing-icon dashing-icon--close\"></i> Close</button>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t</header>\n\n    <section className=\"content\">\n\t\t\t<div className=\"grid grid-padding\">\n\t      <h2>Example Fullscreen Page</h2>\n\t      <p>This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple! This example shows a fullscreen layout. Simple!</p>\n\t\t\t</div>\n    </section>\n  </div>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}