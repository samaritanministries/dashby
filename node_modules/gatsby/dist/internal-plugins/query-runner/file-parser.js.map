{"version":3,"sources":["../../../src/internal-plugins/query-runner/file-parser.js"],"names":["fs","require","crypto","_","getGraphQLTag","report","apiRunnerNode","generateQueryName","def","hash","file","name","value","camelCase","kind","parseToAst","filePath","fileStr","ast","transpiled","filename","contents","length","item","tmp","error","undefined","warnForGlobalTag","warn","findGraphQLTags","text","Promise","resolve","reject","then","queries","documentLocations","WeakMap","TaggedTemplateExpression","path","parentPath","node","gqlAst","isGlobal","definitions","forEach","set","start","loc","map","d","isStaticQuery","push","ExportNamedDeclaration","state","traverse","innerPath","uniqueQueries","uniqBy","q","get","catch","cache","FileParser","parseFile","readFile","err","indexOf","createHash","update","digest","astDefinitions","parseFiles","files","documents","Map","all","doc"],"mappings":"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","sourcesContent":["// @flow\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\nconst _ = require(`lodash`)\n\n// Traverse is a es6 module...\nimport traverse from \"babel-traverse\"\nconst getGraphQLTag = require(`babel-plugin-remove-graphql-queries`)\n  .getGraphQLTag\nconst report = require(`gatsby-cli/lib/reporter`)\n\nimport type { DocumentNode, DefinitionNode } from \"graphql\"\nimport { babelParseToAst } from \"../../utils/babel-parse-to-ast\"\n\nconst apiRunnerNode = require(`../../utils/api-runner-node`)\n\n/**\n * Add autogenerated query name if it wasn't defined by user.\n */\nconst generateQueryName = ({ def, hash, file }) => {\n  if (!def.name || !def.name.value) {\n    def.name = {\n      value: `${_.camelCase(file)}${hash}`,\n      kind: `Name`,\n    }\n  }\n  return def\n}\n\nasync function parseToAst(filePath, fileStr) {\n  let ast\n\n  // Preprocess and attempt to parse source; return an AST if we can, log an\n  // error if we can't.\n  const transpiled = await apiRunnerNode(`preprocessSource`, {\n    filename: filePath,\n    contents: fileStr,\n  })\n  if (transpiled && transpiled.length) {\n    for (const item of transpiled) {\n      try {\n        const tmp = babelParseToAst(item, filePath)\n        ast = tmp\n        break\n      } catch (error) {\n        report.error(error)\n        continue\n      }\n    }\n    if (ast === undefined) {\n      report.error(`Failed to parse preprocessed file ${filePath}`)\n    }\n  } else {\n    try {\n      ast = babelParseToAst(fileStr, filePath)\n    } catch (error) {\n      report.error(\n        `There was a problem parsing \"${filePath}\"; any GraphQL ` +\n          `fragments or queries in this file were not processed. \\n` +\n          `This may indicate a syntax error in the code, or it may be a file type ` +\n          `that Gatsby does not know how to parse.`\n      )\n    }\n  }\n\n  return ast\n}\n\nconst warnForGlobalTag = file =>\n  report.warn(\n    `Using the global \\`graphql\\` tag is deprecated, and will not be supported in v3.\\n` +\n      `Import it instead like:  import { graphql } from 'gatsby' in file:\\n` +\n      file\n  )\n\nasync function findGraphQLTags(file, text): Promise<Array<DefinitionNode>> {\n  return new Promise((resolve, reject) => {\n    parseToAst(file, text)\n      .then(ast => {\n        let queries = []\n        if (!ast) {\n          resolve(queries)\n          return\n        }\n\n        /**\n         * A map of graphql documents to unique locations.\n         *\n         * A graphql document's unique location is made of:\n         *\n         *  - the location of the graphql template literal that contains the document, and\n         *  - the document's location within the graphql template literal\n         *\n         * This is used to prevent returning duplicated documents.\n         */\n        const documentLocations = new WeakMap()\n\n        // Look for queries in <StaticQuery /> elements.\n        traverse(ast, {\n          TaggedTemplateExpression(path) {\n            if (\n              (`descendant of query`,\n              path?.parentPath?.parentPath?.node?.name?.name !== `query`)\n            ) {\n              return\n            }\n            if (\n              path.parentPath?.parentPath?.parentPath?.node?.name?.name !==\n              `StaticQuery`\n            ) {\n              return\n            }\n            const { ast: gqlAst, text, hash, isGlobal } = getGraphQLTag(path)\n            if (!gqlAst) return\n\n            if (isGlobal) warnForGlobalTag(file)\n\n            gqlAst.definitions.forEach(def => {\n              documentLocations.set(def, `${path.node.start}-${def.loc.start}`)\n              generateQueryName({ def, hash, file })\n            })\n\n            const definitions = [...gqlAst.definitions].map(d => {\n              d.isStaticQuery = true\n              d.text = text\n              d.hash = hash\n              return d\n            })\n            queries.push(...definitions)\n          },\n        })\n\n        // Look for exported page queries\n        traverse(ast, {\n          ExportNamedDeclaration(path, state) {\n            path.traverse({\n              TaggedTemplateExpression(innerPath) {\n                const { ast: gqlAst, isGlobal, hash } = getGraphQLTag(innerPath)\n                if (!gqlAst) return\n\n                if (isGlobal) warnForGlobalTag(file)\n\n                gqlAst.definitions.forEach(def => {\n                  documentLocations.set(\n                    def,\n                    `${innerPath.node.start}-${def.loc.start}`\n                  )\n                  generateQueryName({ def, hash, file })\n                })\n\n                queries.push(...gqlAst.definitions)\n              },\n            })\n          },\n        })\n\n        // Remove duplicate queries\n        const uniqueQueries = _.uniqBy(queries, q => documentLocations.get(q))\n\n        resolve(uniqueQueries)\n      })\n      .catch(reject)\n  })\n}\n\nconst cache = {}\n\nexport default class FileParser {\n  async parseFile(file: string): Promise<?DocumentNode> {\n    let text\n    try {\n      text = await fs.readFile(file, `utf8`)\n    } catch (err) {\n      report.error(`There was a problem reading the file: ${file}`, err)\n      return null\n    }\n\n    if (text.indexOf(`graphql`) === -1) return null\n    const hash = crypto\n      .createHash(`md5`)\n      .update(file)\n      .update(text)\n      .digest(`hex`)\n\n    try {\n      let astDefinitions =\n        cache[hash] || (cache[hash] = await findGraphQLTags(file, text))\n\n      return astDefinitions.length\n        ? {\n            kind: `Document`,\n            definitions: astDefinitions,\n          }\n        : null\n    } catch (err) {\n      report.error(\n        `There was a problem parsing the GraphQL query in file: ${file}`,\n        err\n      )\n      return null\n    }\n  }\n\n  async parseFiles(files: Array<string>): Promise<Map<string, DocumentNode>> {\n    const documents = new Map()\n\n    return Promise.all(\n      files.map(file =>\n        this.parseFile(file).then(doc => {\n          if (!doc) return\n          documents.set(file, doc)\n        })\n      )\n    ).then(() => documents)\n  }\n}\n"],"file":"file-parser.js"}