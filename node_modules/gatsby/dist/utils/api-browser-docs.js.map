{"version":3,"sources":["../../src/utils/api-browser-docs.js"],"names":["exports","onClientEntry","onInitialClientRender","onPreRouteUpdate","onRouteUpdateDelayed","onRouteUpdate","shouldUpdateScroll","registerServiceWorker","replaceRouterComponent","replaceComponentRenderer","replaceHistory","wrapRootComponent","onPrefetchPathname","disableCorePrefetching","replaceHydrateFunction"],"mappings":";;AAAA;;;;;;;;AAQAA,QAAQC,aAAR,GAAwB,IAAxB;AAEA;;;;;;;;AAOAD,QAAQE,qBAAR,GAAgC,IAAhC;AAEA;;;;;;;;;;;AAUAF,QAAQG,gBAAR,GAA2B,IAA3B;AAEA;;;;;;;;;;;AAUAH,QAAQI,oBAAR,GAA+B,IAA/B;AAEA;;;;;;;;;;;AAUAJ,QAAQK,aAAR,GAAwB,IAAxB;AAEA;;;;;;;;AAOAL,QAAQM,kBAAR,GAA6B,IAA7B;AAEA;;;;;;AAKAN,QAAQO,qBAAR,GAAgC,IAAhC;AAEA;;;;;;AAKAP,QAAQQ,sBAAR,GAAiC,IAAjC;AAEA;;;;;;;;AAOAR,QAAQS,wBAAR,GAAmC,IAAnC;AAEA;;;;;;AAKAT,QAAQU,cAAR,GAAyB,IAAzB;AAEA;;;;;;AAKAV,QAAQW,iBAAR,GAA4B,IAA5B;AAEA;;;;;;;AAMAX,QAAQY,kBAAR,GAA6B,IAA7B;AAEA;;;;;AAIAZ,QAAQa,sBAAR,GAAiC,IAAjC;AAEA;;;;;;;;;;;;;AAYAb,QAAQc,sBAAR,GAAiC,IAAjC","sourcesContent":["/**\n * Called when the Gatsby browser runtime first starts.\n * @example\n * exports.onClientEntry = () => {\n *   console.log(\"We've started!\")\n *   callAnalyticsAPI()\n * }\n */\nexports.onClientEntry = true\n\n/**\n * Called when the initial (but not subsequent) render of Gatsby App is done on the client.\n * @example\n * exports.onInitialClientRender = () => {\n *   console.log(\"ReactDOM.render has executed\")\n * }\n */\nexports.onInitialClientRender = true\n\n/**\n * Called when changing location is started.\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object} $0.action The \"action\" that caused the route change\n * @example\n * exports.onPreRouteUpdate = ({ location }) => {\n *   console.log(\"Gatsby started to change location\", location.pathname)\n * }\n */\nexports.onPreRouteUpdate = true\n\n/**\n * Called when changing location is longer than 1 second.\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object} $0.action The \"action\" that caused the route change\n * @example\n * exports.onRouteUpdateDelayed = () => {\n *   console.log(\"We can show loading indicator now\")\n * }\n */\nexports.onRouteUpdateDelayed = true\n\n/**\n * Called when the user changes routes\n * @param {object} $0\n * @param {object} $0.location A location object\n * @param {object} $0.action The \"action\" that caused the route change\n * @example\n * exports.onRouteUpdate = ({ location }) => {\n *   console.log('new pathname', location.pathname)\n * }\n */\nexports.onRouteUpdate = true\n\n/**\n * Allow a plugin to decide if the \"scroll\" should update or\n * not on a route change.\n * @param {object} $0\n * @param {object} $0.prevRouterProps The previous state of the router before the route change.\n * @param {object} $0.pathname The new pathname\n */\nexports.shouldUpdateScroll = true\n\n/**\n * Allow a plugin to register a Service Worker. Should be a function that returns true.\n * @example\n * exports.registerServiceWorker = () => true\n */\nexports.registerServiceWorker = true\n\n/**\n * Allow a plugin to replace the router component e.g. to use a custom history version.\n * @param {object} $0\n * @param {object} $0.history The history instance to use in the replacement router instance\n */\nexports.replaceRouterComponent = true\n\n/**\n * Allow a plugin to replace the page component renderer. This api runner can be used to\n * implement page transitions. See https://github.com/gatsbyjs/gatsby/tree/master/examples/using-page-transitions for an example of this.\n * @param {object} $0\n * @param {object} $0.props The props of the page.\n * @param {object} $0.loader The gatsby loader.\n */\nexports.replaceComponentRenderer = true\n\n/**\n * Allow a plugin to replace the history object.\n * @param {object} $0\n * @param {object} $0.basename The base URL of the app.\n */\nexports.replaceHistory = true\n\n/**\n * Allow a plugin to wrap the root component.\n * @param {object} $0\n * @param {object} $0.Root The \"Root\" component built by Gatsby.\n */\nexports.wrapRootComponent = true\n\n/**\n * Called when prefetching for a pathname is triggered. Allows\n * for plugins with custom prefetching logic.\n * @param {object} $0\n * @param {object} $0.pathname The pathname whose resources should now be prefetched\n */\nexports.onPrefetchPathname = true\n\n/**\n * Plugins can take over prefetching logic. If they do, they should call this\n * to disable the now duplicate core prefetching logic.\n */\nexports.disableCorePrefetching = true\n\n/*\n * Allow a plugin to replace the ReactDOM.render function call by a custom renderer.\n * This method takes no param and should return a function with same signature as ReactDOM.render()\n * Note it's very important to call the callback after rendering, otherwise Gatsby will not be able to call `onInitialClientRender`\n * @example\n * exports.replaceHydrateFunction = () => {\n *   return (element, container, callback) => {\n *     console.log(\"rendering!\");\n *     ReactDOM.render(element, container, callback);\n *   };\n * };\n */\nexports.replaceHydrateFunction = true\n"],"file":"api-browser-docs.js"}