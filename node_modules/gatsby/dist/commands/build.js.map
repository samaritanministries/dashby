{"version":3,"sources":["../../src/commands/build.js"],"names":["report","require","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirectory","initTracer","stopTracer","tracer","globalTracer","reportFailure","msg","err","log","panic","module","exports","program","openTracingConfigFile","buildSpan","startSpan","setTag","directory","parentSpan","graphqlRunner","graphql","activity","activityTimer","start","catch","end","stripIndent","info","process","uptime","finish","build"],"mappings":";;;;;;AAEA,MAAMA,SAASC,QAAS,yBAAT,CAAf;;AACA,MAAMC,YAAYD,QAAS,cAAT,CAAlB;;AACA,MAAME,wBAAwBF,QAAS,oBAAT,CAA9B;;AACA,MAAMG,YAAYH,QAAS,cAAT,CAAlB;;AACA,MAAMI,gBAAgBJ,QAAS,0BAAT,CAAtB;;AACA,MAAMK,sBAAsBL,QAAS,gCAAT,CAA5B;;iBACmCA,QAAS,iBAAT,C;MAA3BM,U,YAAAA,U;MAAYC,U,YAAAA,U;;AACpB,MAAMC,SAASR,QAAS,aAAT,EAAuBS,YAAvB,EAAf;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAwC;AACtCb,SAAOc,GAAP,CAAY,EAAZ;AACAd,SAAOe,KAAP,CAAaH,GAAb,EAAkBC,GAAlB;AACD;;AAWDG,OAAOC,OAAP;AAAA;AAAA;AAAA,+CAAiB,WAAqBC,OAArB,EAAyC;AACxDX,eAAWW,QAAQC,qBAAnB;AAEA,UAAMC,YAAYX,OAAOY,SAAP,CAAkB,OAAlB,CAAlB;AACAD,cAAUE,MAAV,CAAkB,WAAlB,EAA8BJ,QAAQK,SAAtC;;AAJwD,uBAMxBnB,4BAC3Bc,OAD2B;AAE9BM,kBAAYJ;AAFkB,OANwB;AAAA,UAMhDK,aANgD,QAMhDA,aANgD;;AAWxD,UAAMpB,cAAe,YAAf,EAA4B;AAChCqB,eAASD,aADuB;AAEhCD,kBAAYJ;AAFoB,KAA5B,CAAN,CAXwD,CAgBxD;AACA;;AACAd;AAEA,QAAIqB,QAAJ;AACAA,eAAW3B,OAAO4B,aAAP,CACR,gDADQ,EAET;AAAEJ,kBAAYJ;AAAd,KAFS,CAAX;AAIAO,aAASE,KAAT;AACA,UAAM1B,sBAAsBe,OAAtB,EAA+BY,KAA/B,CAAqCjB,OAAO;AAChDF,oBAAe,sCAAf,EAAsDE,GAAtD;AACD,KAFK,CAAN;AAGAc,aAASI,GAAT;AAEAJ,eAAW3B,OAAO4B,aAAP,CAAsB,gCAAtB,EAAuD;AAChEJ,kBAAYJ;AADoD,KAAvD,CAAX;AAGAO,aAASE,KAAT;AACA,UAAM3B,UAAUgB,OAAV,EAAmBS,QAAnB,EAA6BG,KAA7B,CAAmCjB,OAAO;AAC9CF,oBACEX,OAAOgC,WAAY;;;;OADrB,EAMEnB,GANF;AAQD,KATK,CAAN;AAUAc,aAASI,GAAT;AAEA,UAAM1B,cAAe,aAAf,EAA6B;AACjCqB,eAASD,aADwB;AAEjCD,kBAAYJ;AAFqB,KAA7B,CAAN;AAKApB,WAAOiC,IAAP,CAAa,oBAAmBC,QAAQC,MAAR,EAAiB,MAAjD;AAEAf,cAAUgB,MAAV;AAEA,UAAM5B,YAAN;AACD,GAzDD;;AAAA,kBAAgC6B,KAAhC;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\n\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst copyStaticDirectory = require(`../utils/copy-static-directory`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst tracer = require(`opentracing`).globalTracer()\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  browserslist: string[],\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nmodule.exports = async function build(program: BuildArgs) {\n  initTracer(program.openTracingConfigFile)\n\n  const buildSpan = tracer.startSpan(`build`)\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirectory()\n\n  let activity\n  activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building static HTML for pages`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  await buildHTML(program, activity).catch(err => {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML for pages failed\n\n        See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n      `,\n      err\n    )\n  })\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n\n  await stopTracer()\n}\n"],"file":"build.js"}