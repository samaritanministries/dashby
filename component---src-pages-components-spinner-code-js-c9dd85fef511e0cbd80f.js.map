{"version":3,"sources":["webpack:///./src/pages/components/spinner/code.js","webpack:///./src/components/subnavigation.js","webpack:///./src/components/codetoggle.js","webpack:///./node_modules/prismjs/plugins/custom-class/prism-custom-class.min.js"],"names":["currentPageNameLower","toLowerCase","SpinnerCode","props","_this","_React$Component","call","this","state","addSpinner","handleClick","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0___default","setState","prevState","render","location","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_5__","className","_components_subnavigation__WEBPACK_IMPORTED_MODULE_6__","pageName","_components_appcontent__WEBPACK_IMPORTED_MODULE_7__","id","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","pathname","style","height","_components_codetoggle__WEBPACK_IMPORTED_MODULE_8__","_components_codetoggle_scss__WEBPACK_IMPORTED_MODULE_9__","data-id","onClick","React","Component","propTypes","PropTypes","object","isRequired","SubNav","_ref","sectionName","getPageName","getSectionName","isPartiallyActive","_ref2","isPartiallyCurrent","PartialNavLink","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","Object","assign","getProps","children","CodeToggle","showCode","toggleCode","componentDidMount","Prism","highlightAll","plugins","customClass","map","tag","global","self","s","classMap","i","prefix","prefixString","hooks","add","classes"],"mappings":"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","file":"component---src-pages-components-spinner-code-js-c9dd85fef511e0cbd80f.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../../../components/layout'\nimport SubNav from '../../../components/subnavigation'\nimport AppContent from '../../../components/appcontent'\nimport CodeToggle from '../../../components/codetoggle'\nimport CodeToggleSCSS from '../../../components/codetoggle-scss'\n\nconst currentPageName = \"Spinner\";\nconst currentPageNameLower = currentPageName.toLowerCase();\n\nclass SpinnerCode extends React.Component {\n  static propTypes = { location: PropTypes.object.isRequired }\n\n  constructor(props) {\n    super(props);\n    this.state = {addSpinner: false};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n   handleClick() {\n    this.setState(prevState => ({\n      addSpinner: !prevState.addSpinner\n    }));\n  }\n\n  render() {\n    const { location } = this.props;\n\n    return (\n\n      <Layout>\n        <header className=\"subnav\">\n          <h1>{currentPageName}</h1>\n          <SubNav pageName={currentPageNameLower}/>\n        </header>\n        <AppContent>\n          <div className=\"row\">\n            <div className=\"column column--full\">\n              <h2 className=\"example-header no-margin--top\" id=\"defaultSpinner\">Default Spinner\n                <Link to={location.pathname + \"/#defaultSpinner\"} className=\"button button--transparent button--copy-link\"></Link>\n              </h2>\n              <div className=\"row example-container\">\n                <div className=\"column column--full\">\n                  <div className=\"relative\" style={{ height: \"8rem\" }}>\n                    <div className=\"dash-spinner\"></div>\n                  </div>\n                </div>\n              </div>\n              <CodeToggle>\n{`<div class=\"dash-spinner\"></div>`}\n              </CodeToggle>\n              <CodeToggleSCSS>\n{`//Include this variable in your theme file to change the color of your spinner\n$spinner-color: #000;`}\n              </CodeToggleSCSS>\n\n              <h2 className=\"example-header\">Small Spinner<button className=\"button button--transparent button--copy-link\" data-id=\"copyurl\" id=\"Small_Spinner\" /></h2>\n              <div className=\"row example-container\">\n                <div className=\"column column--full\">\n                  <div className=\"relative\" style={{ height: \"5rem\" }}>\n                    <div className=\"dash-spinner small\"></div>\n                  </div>\n                </div>\n              </div>\n              <CodeToggle>\n{`<div class=\"dash-spinner small\"></div>`}\n              </CodeToggle>\n\n              <h2 className=\"example-header\" id=\"buttonSpinner\">Button Spinner\n                <Link to={location.pathname + \"/#buttonSpinner\"} className=\"button button--transparent button--copy-link\"></Link>\n              </h2>\n              <div className=\"row example-container\">\n                <div className=\"column column--full\">\n                  <button onClick={this.handleClick} className={this.state.addSpinner ? 'button button--blue has-spinner' : 'button button--blue'}>\n                    Click me\n                  </button>\n                </div>\n              </div>\n              <CodeToggle>\n{`<button class=\"button button--blue has-spinner\">\n  Click Me\n</button>`}\n              </CodeToggle>\n\n            </div>\n          </div>\n        </AppContent>\n      </Layout>\n    )\n  }\n}\n\nexport default SpinnerCode;\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst SubNav = ({ pageName, sectionName }) => {\n\n  if (sectionName == null) {\n    sectionName = \"components\"\n  }\n  //For Component Names with a space\n  if (pageName === \"css grid\") {\n    pageName = \"css-grid\"\n  } else if (pageName === \"progress stepper\") {\n    pageName = \"progress-stepper\"\n  } else if (pageName === \"radio buttons\") {\n    pageName = \"radio-buttons\"\n  }\n\n  const getPageName = pageName;\n  const getSectionName = sectionName;\n\n  const isPartiallyActive = ({ isPartiallyCurrent }) => {\n  return isPartiallyCurrent\n    ? { className: 'active' }\n    : { className: '' }\n  }\n\n  const PartialNavLink = props => (\n    <Link getProps={isPartiallyActive} {...props}>\n      {props.children}\n    </Link>\n  )\n\n  return (\n    <div className=\"subnav-links\">\n        <PartialNavLink to={ getSectionName + \"/\" + getPageName  + \"/code\"}>Code</PartialNavLink>\n        <PartialNavLink to={ getSectionName + \"/\" + getPageName  + \"/guidelines\"}>Guidelines</PartialNavLink>\n    </div>\n  );\n};\n\nexport default SubNav\n","import React from 'react'\nimport Prism from 'prismjs'\nimport 'prismjs/plugins/custom-class/prism-custom-class.min.js'\n\nclass CodeToggle extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n    this.toggleCode = this.toggleCode.bind(this);\n  }\n\n   toggleCode() {\n    this.setState(prevState => ({\n      showCode: !prevState.showCode\n    }));\n  }\n\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n\n  render() {\n    Prism.plugins.customClass.map({ tag: 'exampletag', });\n\n    return (\n      <div className={this.state.showCode ? 'group-open' : ''}>\n        <div onClick={this.toggleCode} className={this.state.showCode ? 'code-toggle is-open' : 'code-toggle'}><i className=\"icon--code\"></i></div>\n        <pre className={this.state.showCode ? 'language-html show' : 'language-html'}>\n          <code className={this.state.showCode ? 'language-html show' : 'language-html'}>{this.props.children}</code>\n        </pre>\n      </div>\n    )\n  }\n}\nexport default CodeToggle;\n","!function(){if(\"undefined\"!=typeof self&&self.Prism||\"undefined\"!=typeof global&&global.Prism){var s={classMap:{}};Prism.plugins.customClass={map:function(i){s.classMap=i},prefix:function(i){s.prefixString=i}},Prism.hooks.add(\"wrap\",function(i){(s.classMap||s.prefixString)&&(i.classes=i.classes.map(function(i){return(s.prefixString||\"\")+(s.classMap[i]||i)}))})}}();"],"sourceRoot":""}