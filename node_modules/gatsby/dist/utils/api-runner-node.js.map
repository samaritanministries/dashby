{"version":3,"sources":["../../src/utils/api-runner-node.js"],"names":["Promise","require","glob","_","tracer","globalTracer","reporter","cache","apiList","createNodeId","boundPluginActionCreators","doubleBind","boundActionCreators","api","plugin","actionOptions","traceId","name","keys","Object","doubleBoundActionCreators","i","length","key","boundActionCreator","args","initAPICallTracing","parentSpan","startSpan","spanName","spanArgs","defaultSpanArgs","childOf","merge","runAPI","gatsbyNode","resolve","spanOptions","pluginSpan","setTag","pathPrefix","store","emitter","loadNodeContent","getNodes","getNode","hasNodeChanged","getNodeAndSavePathDependency","getState","program","prefixPaths","config","namespacedCreateNodeId","id","tracing","apiCallArgs","actions","pluginOptions","fromCallback","callback","cb","err","val","finish","result","filteredPlugins","hasAPIFile","sync","apisRunningById","Map","apisRunningByTraceId","waitingForCasacadeToFinish","module","exports","pluginSource","apiSpanArgs","apiSpan","forEach","traceTags","value","error","process","exit","plugins","flattenedPlugins","filter","noSourcePluginPlugins","p","apiRunInstance","span","startTime","Date","toJSON","type","node","internal","contentDigest","filename","page","path","JSON","stringify","waitForCascadingActions","push","set","has","currentCount","get","pluginName","mapSeries","catch","env","NODE_ENV","panic","then","results","delete","size","emit","isEmpty","instance","apisByTraceIdCount"],"mappings":"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","sourcesContent":["const Promise = require(`bluebird`)\nconst glob = require(`glob`)\nconst _ = require(`lodash`)\n\nconst tracer = require(`opentracing`).globalTracer()\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst cache = require(`./cache`)\nconst apiList = require(`./api-node-docs`)\nconst createNodeId = require(`./create-node-id`)\n\n// Bind action creators per plugin so we can auto-add\n// metadata to actions they create.\nconst boundPluginActionCreators = {}\nconst doubleBind = (boundActionCreators, api, plugin, actionOptions) => {\n  const { traceId } = actionOptions\n  if (boundPluginActionCreators[plugin.name + api + traceId]) {\n    return boundPluginActionCreators[plugin.name + api + traceId]\n  } else {\n    const keys = Object.keys(boundActionCreators)\n    const doubleBoundActionCreators = {}\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const boundActionCreator = boundActionCreators[key]\n      if (typeof boundActionCreator === `function`) {\n        doubleBoundActionCreators[key] = (...args) => {\n          // Let action callers override who the plugin is. Shouldn't be\n          // used that often.\n          if (args.length === 1) {\n            boundActionCreator(args[0], plugin, actionOptions)\n          } else if (args.length === 2) {\n            boundActionCreator(args[0], args[1], actionOptions)\n          }\n        }\n      }\n    }\n    boundPluginActionCreators[\n      plugin.name + api + traceId\n    ] = doubleBoundActionCreators\n    return doubleBoundActionCreators\n  }\n}\n\nconst initAPICallTracing = parentSpan => {\n  const startSpan = (spanName, spanArgs = {}) => {\n    const defaultSpanArgs = { childOf: parentSpan }\n\n    return tracer.startSpan(spanName, _.merge(defaultSpanArgs, spanArgs))\n  }\n\n  return {\n    tracer,\n    parentSpan,\n    startSpan,\n  }\n}\n\nconst runAPI = (plugin, api, args) => {\n  const gatsbyNode = require(`${plugin.resolve}/gatsby-node`)\n  if (gatsbyNode[api]) {\n    const parentSpan = args && args.parentSpan\n    const spanOptions = parentSpan ? { childOf: parentSpan } : {}\n    const pluginSpan = tracer.startSpan(`run-plugin`, spanOptions)\n\n    pluginSpan.setTag(`api`, api)\n    pluginSpan.setTag(`plugin`, plugin.name)\n\n    let pathPrefix = ``\n    const {\n      store,\n      emitter,\n      loadNodeContent,\n      getNodes,\n      getNode,\n      hasNodeChanged,\n      getNodeAndSavePathDependency,\n    } = require(`../redux`)\n    const { boundActionCreators } = require(`../redux/actions`)\n\n    const doubleBoundActionCreators = doubleBind(\n      boundActionCreators,\n      api,\n      plugin,\n      { ...args, parentSpan: pluginSpan }\n    )\n\n    if (store.getState().program.prefixPaths) {\n      pathPrefix = store.getState().config.pathPrefix\n    }\n\n    const namespacedCreateNodeId = id => createNodeId(id, plugin.name)\n\n    const tracing = initAPICallTracing(pluginSpan)\n\n    const apiCallArgs = [\n      {\n        ...args,\n        pathPrefix,\n        boundActionCreators: doubleBoundActionCreators,\n        actions: doubleBoundActionCreators,\n        loadNodeContent,\n        store,\n        emitter,\n        getNodes,\n        getNode,\n        hasNodeChanged,\n        reporter,\n        getNodeAndSavePathDependency,\n        cache,\n        createNodeId: namespacedCreateNodeId,\n        tracing,\n      },\n      plugin.pluginOptions,\n    ]\n\n    // If the plugin is using a callback use that otherwise\n    // expect a Promise to be returned.\n    if (gatsbyNode[api].length === 3) {\n      return Promise.fromCallback(callback => {\n        const cb = (err, val) => {\n          pluginSpan.finish()\n          callback(err, val)\n        }\n        gatsbyNode[api](...apiCallArgs, cb)\n      })\n    } else {\n      const result = gatsbyNode[api](...apiCallArgs)\n      pluginSpan.finish()\n      return Promise.resolve(result)\n    }\n  }\n\n  return null\n}\n\nlet filteredPlugins\nconst hasAPIFile = plugin => glob.sync(`${plugin.resolve}/gatsby-node*`)[0]\n\nlet apisRunningById = new Map()\nlet apisRunningByTraceId = new Map()\nlet waitingForCasacadeToFinish = []\n\nmodule.exports = async (api, args = {}, pluginSource) =>\n  new Promise(resolve => {\n    const { parentSpan } = args\n    const apiSpanArgs = parentSpan ? { childOf: parentSpan } : {}\n    const apiSpan = tracer.startSpan(`run-api`, apiSpanArgs)\n\n    apiSpan.setTag(`api`, api)\n    _.forEach(args.traceTags, (value, key) => {\n      apiSpan.setTag(key, value)\n    })\n\n    // Check that the API is documented.\n    if (!apiList[api]) {\n      reporter.error(`api: \"${api}\" is not a valid Gatsby api`)\n      process.exit()\n    }\n\n    const { store } = require(`../redux`)\n    const plugins = store.getState().flattenedPlugins\n    // Get the list of plugins that implement gatsby-node\n    if (!filteredPlugins) {\n      filteredPlugins = plugins.filter(plugin => hasAPIFile(plugin))\n    }\n\n    // Break infinite loops.\n    // Sometimes a plugin will implement an API and call an\n    // action which will trigger the same API being called.\n    // \"onCreatePage\" is the only example right now.\n    // In these cases, we should avoid calling the originating plugin\n    // again.\n    let noSourcePluginPlugins = filteredPlugins\n    if (pluginSource) {\n      noSourcePluginPlugins = filteredPlugins.filter(\n        p => p.name !== pluginSource\n      )\n    }\n\n    const apiRunInstance = {\n      api,\n      args,\n      pluginSource,\n      resolve,\n      span: apiSpan,\n      startTime: new Date().toJSON(),\n      traceId: args.traceId,\n    }\n\n    // Generate IDs for api runs. Most IDs we generate from the args\n    // but some API calls can have very large argument objects so we\n    // have special ways of generating IDs for those to avoid stringifying\n    // large objects.\n    let id\n    if (api === `setFieldsOnGraphQLNodeType`) {\n      id = `${api}${apiRunInstance.startTime}${args.type.name}${args.traceId}`\n    } else if (api === `onCreateNode`) {\n      id = `${api}${apiRunInstance.startTime}${\n        args.node.internal.contentDigest\n      }${args.traceId}`\n    } else if (api === `preprocessSource`) {\n      id = `${api}${apiRunInstance.startTime}${args.filename}${args.traceId}`\n    } else if (api === `onCreatePage`) {\n      id = `${api}${apiRunInstance.startTime}${args.page.path}${args.traceId}`\n    } else {\n      id = `${api}|${apiRunInstance.startTime}|${\n        apiRunInstance.traceId\n      }|${JSON.stringify(args)}`\n    }\n    apiRunInstance.id = id\n\n    if (args.waitForCascadingActions) {\n      waitingForCasacadeToFinish.push(apiRunInstance)\n    }\n\n    apisRunningById.set(apiRunInstance.id, apiRunInstance)\n    if (apisRunningByTraceId.has(apiRunInstance.traceId)) {\n      const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n      apisRunningByTraceId.set(apiRunInstance.traceId, currentCount + 1)\n    } else {\n      apisRunningByTraceId.set(apiRunInstance.traceId, 1)\n    }\n\n    let pluginName = null\n\n    Promise.mapSeries(noSourcePluginPlugins, plugin => {\n      if (plugin.name === `default-site-plugin`) {\n        pluginName = `gatsby-node.js`\n      } else {\n        pluginName = `Plugin ${plugin.name}`\n      }\n      return Promise.resolve(\n        runAPI(plugin, api, { ...args, parentSpan: apiSpan })\n      )\n    })\n      .catch(err => {\n        if (err) {\n          if (process.env.NODE_ENV === `production`) {\n            return reporter.panic(`${pluginName} returned an error`, err)\n          }\n          return reporter.error(`${pluginName} returned an error`, err)\n        }\n        return null\n      })\n      .then(results => {\n        // Remove runner instance\n        apisRunningById.delete(apiRunInstance.id)\n        const currentCount = apisRunningByTraceId.get(apiRunInstance.traceId)\n        apisRunningByTraceId.set(apiRunInstance.traceId, currentCount - 1)\n\n        if (apisRunningById.size === 0) {\n          const { emitter } = require(`../redux`)\n          emitter.emit(`API_RUNNING_QUEUE_EMPTY`)\n        }\n\n        // Filter empty results\n        apiRunInstance.results = results.filter(result => !_.isEmpty(result))\n\n        // Filter out empty responses and return if the\n        // api caller isn't waiting for cascading actions to finish.\n        if (!args.waitForCascadingActions) {\n          apiSpan.finish()\n          resolve(apiRunInstance.results)\n        }\n\n        // Check if any of our waiters are done.\n        waitingForCasacadeToFinish = waitingForCasacadeToFinish.filter(\n          instance => {\n            // If none of its trace IDs are running, it's done.\n            const apisByTraceIdCount = apisRunningByTraceId.get(\n              instance.traceId\n            )\n            if (apisByTraceIdCount === 0) {\n              instance.span.finish()\n              instance.resolve(instance.results)\n              return false\n            } else {\n              return true\n            }\n          }\n        )\n        return\n      })\n  })\n"],"file":"api-runner-node.js"}