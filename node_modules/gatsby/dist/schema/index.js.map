{"version":3,"sources":["../../src/schema/index.js"],"names":["_","require","GraphQLSchema","GraphQLObjectType","buildNodeTypes","buildNodeConnections","store","invariant","module","exports","parentSpan","typesGQL","connections","values","nodes","mapValues","isEmpty","schema","query","name","fields","dispatch","type","payload"],"mappings":";;;;;;AACA,MAAMA,IAAIC,QAAS,QAAT,CAAV;;iBAC6CA,QAAS,SAAT,C;MAArCC,a,YAAAA,a;MAAeC,iB,YAAAA,iB;;AAEvB,MAAMC,iBAAiBH,QAAS,oBAAT,CAAvB;;AACA,MAAMI,uBAAuBJ,QAAS,0BAAT,CAA7B;;kBACkBA,QAAS,UAAT,C;MAAVK,K,aAAAA,K;;AACR,MAAMC,YAAYN,QAAS,WAAT,CAAlB;;AAEAO,OAAOC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAO;AAAEC;AAAF,GAAP,EAA0B;AACzC,UAAMC,iBAAiBP,eAAe;AAAEM;AAAF,KAAf,CAAvB;AACA,UAAME,cAAcP,qBAAqBL,EAAEa,MAAF,CAASF,QAAT,CAArB,CAApB,CAFyC,CAIzC;;AACA,UAAMG,QAAQd,EAAEe,SAAF,CAAYJ,QAAZ,EAAuB,MAAvB,CAAd;;AAEAJ,cAAU,CAACP,EAAEgB,OAAF,CAAUF,KAAV,CAAX,EAA8B,kCAA9B;AACAP,cAAU,CAACP,EAAEgB,OAAF,CAAUJ,WAAV,CAAX,EAAoC,wCAApC;AAEA,UAAMK,SAAS,IAAIf,aAAJ,CAAkB;AAC/BgB,aAAO,IAAIf,iBAAJ,CAAsB;AAC3BgB,cAAO,eADoB;AAE3BC,kCAAaR,WAAb,EAA6BE,KAA7B;AAF2B,OAAtB;AADwB,KAAlB,CAAf;AAOAR,UAAMe,QAAN,CAAe;AACbC,YAAO,YADM;AAEbC,eAASN;AAFI,KAAf;AAID,GArBD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\nconst _ = require(`lodash`)\nconst { GraphQLSchema, GraphQLObjectType } = require(`graphql`)\n\nconst buildNodeTypes = require(`./build-node-types`)\nconst buildNodeConnections = require(`./build-node-connections`)\nconst { store } = require(`../redux`)\nconst invariant = require(`invariant`)\n\nmodule.exports = async ({ parentSpan }) => {\n  const typesGQL = await buildNodeTypes({ parentSpan })\n  const connections = buildNodeConnections(_.values(typesGQL))\n\n  // Pull off just the graphql node from each type object.\n  const nodes = _.mapValues(typesGQL, `node`)\n\n  invariant(!_.isEmpty(nodes), `There are no available GQL nodes`)\n  invariant(!_.isEmpty(connections), `There are no available GQL connections`)\n\n  const schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n      name: `RootQueryType`,\n      fields: { ...connections, ...nodes },\n    }),\n  })\n\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n}\n"],"file":"index.js"}