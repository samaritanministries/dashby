{"version":3,"sources":["webpack:///./node_modules/classnames/index.js","webpack:///./src/pages/components/toasts/toast.js","webpack:///./src/components/stillworking.js","webpack:///./src/pages/components/toasts/guidelines.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","Toast","className","message","isError","isSuccess","isWarning","cn","error","success","data-id","defaultProps","undefined","currentPageNameLower","toLowerCase","pageName","to"],"mappings":"kFAAA,QAAQ,QASR,WACE,aAEA,IAAIA,EAAS,GAAGC,eAEhB,SAASC,IAGP,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CACA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC1BL,EAAQM,KAAKF,QACR,GAAIG,MAAMC,QAAQJ,IAAQA,EAAID,OAAQ,CAC3C,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAE/BK,GACFT,EAAQM,KAAKG,QAEV,GAAgB,WAAZJ,EACT,IAAK,IAAIM,KAAOP,EACVP,EAAOe,KAAKR,EAAKO,IAAQP,EAAIO,IAC/BX,EAAQM,KAAKK,IAMrB,OAAOX,EAAQa,KAAK,KAGeC,EAAOC,SAC1ChB,EAAoB,QAAIA,EACxBe,EAAOC,QAAUhB,QAKhB,KAFwB,EAAF,WACrB,OAAOA,GACR,QAFoB,OAEpB,aAxCL,I,kCCTA,2FAIO,SAASiB,EAAT,GAAuE,IAAD,EAArDC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,UAAwB,EAAbC,UAC9D,OACE,yBACEJ,UAAWK,IAAG,iBAAD,OACVL,KAAcA,EADJ,EAEXM,MAAOJ,EAFI,EAGXK,QAASJ,EAHE,IAKbK,UAAQ,iBAER,uBAAGR,UAAU,wBACb,2BAAIC,IAYVF,EAAMU,aAAe,CACnBT,eAAWU,EACXR,SAAS,EACTC,WAAW,EACXF,aAASS,GAGIX,a,kCClCf,mCAIe,sBACb,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,wBACb,gD,kCCPN,4FAUMW,GAVN,UASwB,SACqBC,eAE9B,4BACb,kBAAC,IAAD,KACE,4BAAQZ,UAAU,UAChB,4BANkB,UAOlB,kBAAC,IAAD,CAAQa,SAAUF,KAEpB,kBAAC,IAAD,KACE,yBAAKX,UAAU,qBACb,uBAAGA,UAAU,SAAb,0IACA,wBAAIA,UAAU,6CAAd,iBACA,6KACA,yBAAKA,UAAU,8BACb,kCACE,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,qEAEf,kBAAC,UAAD,CAAOG,WAAW,EAAMF,QAAQ,6BAA6BD,UAAU,0CAEzE,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,+DAEf,kBAAC,UAAD,CAAOE,SAAS,EAAMD,QAAQ,mHAAmHD,UAAU,4CAKjK,wBAAIA,UAAU,8BAAd,cACA,wLACA,mGAAwE,kBAAC,IAAD,CAAMc,GAAG,8CAAT,eAAxE","file":"component---src-pages-components-toasts-guidelines-js-3478261a6fe7427341d2.js","sourcesContent":["require(\"core-js/modules/es6.array.is-array\");\n\n/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames[\"default\"] = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import cn from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nexport function Toast({ className, message, isError, isSuccess, isWarning }) {\n  return (\n    <div\n      className={cn(\"toast-message\", {\n        [className]: !!className,\n        error: isError,\n        success: isSuccess\n      })}\n      data-id=\"toast-message\"\n    >\n      <i className=\"toast-message--icon\"></i>\n      <p>{message}</p>\n    </div>\n  );\n}\n\nToast.propTypes = {\n  className: PropTypes.string,\n  isError: PropTypes.bool,\n  isSuccess: PropTypes.bool,\n  message: PropTypes.string\n};\n\nToast.defaultProps = {\n  className: undefined,\n  isError: false,\n  isSuccess: false,\n  message: undefined\n};\n\nexport default Toast;\n","import React from 'react'\n\nimport '../sass/example-page/example-page.scss'\n\nexport default () => (\n  <div className=\"follow-message\">\n    <div className=\"follow-message-inner\">\n      <h3>Coming soon!</h3>\n    </div>\n  </div>\n)\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Toast from './toast'\n\nimport Layout from '../../../components/layout'\nimport SubNav from '../../../components/subnavigation'\nimport AppContent from '../../../components/appcontent'\nimport StillWorking from '../../../components/stillworking'\n\nconst currentPageName = \"Toasts\";\nconst currentPageNameLower = currentPageName.toLowerCase();\n\nexport default () => (\n  <Layout>\n    <header className=\"subnav\">\n      <h1>{currentPageName}</h1>\n      <SubNav pageName={currentPageNameLower}/>\n    </header>\n    <AppContent>\n      <div className=\"grid grid-padding\">\n        <p className=\"intro\">Toasts are used to show the user a response to an action they just completed. They appear temporarily toward the bottom of the screen.</p>\n        <h2 className=\"has-number has-number--one no-margin--top\">Toast Content</h2>\n        <p>The amount of text should be limited to one short, concise sentence. A toast only shows for 4 seconds, so it should be quick and easy to read.</p>\n        <div className=\"image-container p-space-xl\">\n          <fieldset>\n            <div className=\"flex-container pb-space-m\">\n              <div className=\"icon-container float-left\">\n                <i className=\"dashing-icon dashing-icon--checkmark-filled dashing-icon--green\"></i>\n              </div>\n              <Toast isSuccess={true} message=\"Address successfully saved\" className=\"toast-message--example mt-space-none\"/>\n            </div>\n            <div className=\"flex-container\">\n              <div className=\"icon-container float-left\">\n                <i className=\"dashing-icon dashing-icon--alert-filled dashing-icon--red\"></i>\n              </div>\n              <Toast isError={true} message=\"The address that you tried to save failed. If you would like to try again, please navigate to your profile page.\" className=\"toast-message--example mt-space-none\"/>\n            </div>\n          </fieldset>\n        </div>\n\n        <h2 className=\"has-number has-number--two\">Importance</h2>\n        <p>Toasts should be used to provide instant feedback to a user after an action. They should not interrupt the user and don't require the user to close them.</p>\n        <p>If you would like to notify the user more permanently, you may use a <Link to=\"/components/banner/code/#defaultCardBanner\">Card Banner</Link>.</p>\n      </div>\n    </AppContent>\n  </Layout>\n)\n"],"sourceRoot":""}