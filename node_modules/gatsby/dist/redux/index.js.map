{"version":3,"sources":["../../src/redux/index.js"],"names":["Redux","require","Promise","_","fs","mitt","stringify","emitter","reducers","objectToMap","obj","map","Map","Object","keys","forEach","key","set","mapToObject","value","initialState","file","readFileSync","process","cwd","Buffer","isBuffer","JSON","parse","staticQueryComponents","components","nodes","e","store","createStore","combineReducers","applyMiddleware","multi","dispatch","next","action","Array","isArray","filter","Boolean","saveState","state","pickedState","pick","stringified","writeFile","saveStateDebounced","debounce","subscribe","lastAction","getState","emit","type","bootstrapFinished","env","gatsby_executing_command","on","exports","getNodes","from","values","getNode","id","get","hasNodeChanged","digest","node","internal","contentDigest","loadNodeContent","isString","content","resolve","plugin","flattenedPlugins","find","plug","name","owner","Error","then","getNodeAndSavePathDependency","path","createPageDependency","nodeId"],"mappings":"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","sourcesContent":["const Redux = require(`redux`)\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst fs = require(`fs`)\nconst mitt = require(`mitt`)\nconst stringify = require(`json-stringify-safe`)\n\n// Create event emitter for actions\nconst emitter = mitt()\n\n// Reducers\nconst reducers = require(`./reducers`)\n\nconst objectToMap = obj => {\n  let map = new Map()\n  Object.keys(obj).forEach(key => {\n    map.set(key, obj[key])\n  })\n  return map\n}\n\nconst mapToObject = map => {\n  const obj = {}\n  for (let [key, value] of map) {\n    obj[key] = value\n  }\n  return obj\n}\n\n// Read from cache the old node data.\nlet initialState = {}\ntry {\n  const file = fs.readFileSync(`${process.cwd()}/.cache/redux-state.json`)\n  // Apparently the file mocking in node-tracking-test.js\n  // can override the file reading replacing the mocked string with\n  // an already parsed object.\n  if (Buffer.isBuffer(file) || typeof file === `string`) {\n    initialState = JSON.parse(file)\n  }\n  if (initialState.staticQueryComponents) {\n    initialState.staticQueryComponents = objectToMap(\n      initialState.staticQueryComponents\n    )\n  }\n  if (initialState.components) {\n    initialState.components = objectToMap(initialState.components)\n  }\n  if (initialState.nodes) {\n    initialState.nodes = objectToMap(initialState.nodes)\n  }\n} catch (e) {\n  // ignore errors.\n}\n\nconst store = Redux.createStore(\n  Redux.combineReducers({ ...reducers }),\n  initialState,\n  Redux.applyMiddleware(function multi({ dispatch }) {\n    return next => action =>\n      Array.isArray(action)\n        ? action.filter(Boolean).map(dispatch)\n        : next(action)\n  })\n)\n\n// Persist state.\nconst saveState = state => {\n  const pickedState = _.pick(state, [\n    `nodes`,\n    `status`,\n    `componentDataDependencies`,\n    `jsonDataPaths`,\n    `components`,\n    `staticQueryComponents`,\n  ])\n\n  pickedState.staticQueryComponents = mapToObject(\n    pickedState.staticQueryComponents\n  )\n  pickedState.components = mapToObject(pickedState.components)\n  pickedState.nodes = mapToObject(pickedState.nodes)\n  const stringified = stringify(pickedState, null, 2)\n  fs.writeFile(\n    `${process.cwd()}/.cache/redux-state.json`,\n    stringified,\n    () => {}\n  )\n}\nconst saveStateDebounced = _.debounce(saveState, 1000)\n\nstore.subscribe(() => {\n  const lastAction = store.getState().lastAction\n  emitter.emit(lastAction.type, lastAction)\n})\n\n// During development, once bootstrap is finished, persist state on changes.\nlet bootstrapFinished = false\nif (process.env.gatsby_executing_command === `develop`) {\n  emitter.on(`BOOTSTRAP_FINISHED`, () => {\n    bootstrapFinished = true\n    saveState(store.getState())\n  })\n  emitter.on(`*`, () => {\n    if (bootstrapFinished) {\n      saveStateDebounced(store.getState())\n    }\n  })\n}\n\n// During builds, persist state once bootstrap has finished.\nif (process.env.gatsby_executing_command === `build`) {\n  emitter.on(`BOOTSTRAP_FINISHED`, () => {\n    saveState(store.getState())\n  })\n}\n\n/** Event emitter */\nexports.emitter = emitter\n\n/** Redux store */\nexports.store = store\n\n/**\n * Get all nodes from redux store.\n *\n * @returns {Array}\n */\nexports.getNodes = () => {\n  const nodes = store.getState().nodes\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\nconst getNode = id => store.getState().nodes.get(id)\n\n/** Get node by id from store.\n *\n * @param {string} id\n * @returns {Object}\n */\nexports.getNode = getNode\n\n/**\n * Determine if node has changed.\n *\n * @param {string} id\n * @param {string} digest\n * @returns {boolean}\n */\nexports.hasNodeChanged = (id, digest) => {\n  const node = store.getState().nodes.get(id)\n  if (!node) {\n    return true\n  } else {\n    return node.internal.contentDigest !== digest\n  }\n}\n\n/**\n * Get content for a node from the plugin that created it.\n *\n * @param {Object} node\n * @returns {promise}\n */\nexports.loadNodeContent = node => {\n  if (_.isString(node.internal.content)) {\n    return Promise.resolve(node.internal.content)\n  } else {\n    return new Promise(resolve => {\n      // Load plugin's loader function\n      const plugin = store\n        .getState()\n        .flattenedPlugins.find(plug => plug.name === node.internal.owner)\n      const { loadNodeContent } = require(plugin.resolve)\n      if (!loadNodeContent) {\n        throw new Error(\n          `Could not find function loadNodeContent for plugin ${plugin.name}`\n        )\n      }\n\n      return loadNodeContent(node).then(content => {\n        // TODO update node's content field here.\n        resolve(content)\n      })\n    })\n  }\n}\n\n/**\n * Get node and save path dependency.\n *\n * @param {string} id\n * @param {string} path\n * @returns {Object} node\n */\nexports.getNodeAndSavePathDependency = (id, path) => {\n  const { createPageDependency } = require(`./actions/add-page-dependency`)\n  const node = getNode(id)\n  createPageDependency({ path, nodeId: id })\n  return node\n}\n\n// Start plugin runner which listens to the store\n// and invokes Gatsby API based on actions.\nrequire(`./plugin-runner`)\n"],"file":"index.js"}